
AS-S_OBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005208  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080054a8  080054a8  000154a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800555c  0800555c  0001555c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005560  08005560  00015560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  08005564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004a90  24000078  080055dc  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24004b08  080055dc  00024b08  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   00024030  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003d67  00000000  00000000  000440d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000013e0  00000000  00000000  00047e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001288  00000000  00000000  00049220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037c09  00000000  00000000  0004a4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001641c  00000000  00000000  000820b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001626f3  00000000  00000000  000984cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001fabc0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000055a0  00000000  00000000  001fac14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005490 	.word	0x08005490

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08005490 	.word	0x08005490

080002e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LedTask */
  LedTaskHandle = osThreadNew(StartLedTask, NULL, &LedTask_attributes);
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <MX_FREERTOS_Init+0x18>)
 80002e6:	2100      	movs	r1, #0
 80002e8:	4804      	ldr	r0, [pc, #16]	; (80002fc <MX_FREERTOS_Init+0x1c>)
 80002ea:	f002 fa9d 	bl	8002828 <osThreadNew>
 80002ee:	4603      	mov	r3, r0
 80002f0:	4a03      	ldr	r2, [pc, #12]	; (8000300 <MX_FREERTOS_Init+0x20>)
 80002f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	080054c8 	.word	0x080054c8
 80002fc:	08000305 	.word	0x08000305
 8000300:	24004a68 	.word	0x24004a68

08000304 <StartLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800030c:	2102      	movs	r1, #2
 800030e:	4803      	ldr	r0, [pc, #12]	; (800031c <StartLedTask+0x18>)
 8000310:	f000 ff0d 	bl	800112e <HAL_GPIO_TogglePin>
	  osDelay(100);
 8000314:	2064      	movs	r0, #100	; 0x64
 8000316:	f002 fb19 	bl	800294c <osDelay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800031a:	e7f7      	b.n	800030c <StartLedTask+0x8>
 800031c:	58020000 	.word	0x58020000

08000320 <MX_GPIO_Init>:
     PB9   ------> I2C1_SDA
     PE0   ------> DCMI_D2
     PE1   ------> DCMI_D3
*/
void MX_GPIO_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b08c      	sub	sp, #48	; 0x30
 8000324:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000326:	f107 031c 	add.w	r3, r7, #28
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000336:	4bbc      	ldr	r3, [pc, #752]	; (8000628 <MX_GPIO_Init+0x308>)
 8000338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800033c:	4aba      	ldr	r2, [pc, #744]	; (8000628 <MX_GPIO_Init+0x308>)
 800033e:	f043 0310 	orr.w	r3, r3, #16
 8000342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000346:	4bb8      	ldr	r3, [pc, #736]	; (8000628 <MX_GPIO_Init+0x308>)
 8000348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800034c:	f003 0310 	and.w	r3, r3, #16
 8000350:	61bb      	str	r3, [r7, #24]
 8000352:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000354:	4bb4      	ldr	r3, [pc, #720]	; (8000628 <MX_GPIO_Init+0x308>)
 8000356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800035a:	4ab3      	ldr	r2, [pc, #716]	; (8000628 <MX_GPIO_Init+0x308>)
 800035c:	f043 0304 	orr.w	r3, r3, #4
 8000360:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000364:	4bb0      	ldr	r3, [pc, #704]	; (8000628 <MX_GPIO_Init+0x308>)
 8000366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800036a:	f003 0304 	and.w	r3, r3, #4
 800036e:	617b      	str	r3, [r7, #20]
 8000370:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000372:	4bad      	ldr	r3, [pc, #692]	; (8000628 <MX_GPIO_Init+0x308>)
 8000374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000378:	4aab      	ldr	r2, [pc, #684]	; (8000628 <MX_GPIO_Init+0x308>)
 800037a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800037e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000382:	4ba9      	ldr	r3, [pc, #676]	; (8000628 <MX_GPIO_Init+0x308>)
 8000384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800038c:	613b      	str	r3, [r7, #16]
 800038e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000390:	4ba5      	ldr	r3, [pc, #660]	; (8000628 <MX_GPIO_Init+0x308>)
 8000392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000396:	4aa4      	ldr	r2, [pc, #656]	; (8000628 <MX_GPIO_Init+0x308>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003a0:	4ba1      	ldr	r3, [pc, #644]	; (8000628 <MX_GPIO_Init+0x308>)
 80003a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ae:	4b9e      	ldr	r3, [pc, #632]	; (8000628 <MX_GPIO_Init+0x308>)
 80003b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003b4:	4a9c      	ldr	r2, [pc, #624]	; (8000628 <MX_GPIO_Init+0x308>)
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003be:	4b9a      	ldr	r3, [pc, #616]	; (8000628 <MX_GPIO_Init+0x308>)
 80003c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003c4:	f003 0302 	and.w	r3, r3, #2
 80003c8:	60bb      	str	r3, [r7, #8]
 80003ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003cc:	4b96      	ldr	r3, [pc, #600]	; (8000628 <MX_GPIO_Init+0x308>)
 80003ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003d2:	4a95      	ldr	r2, [pc, #596]	; (8000628 <MX_GPIO_Init+0x308>)
 80003d4:	f043 0308 	orr.w	r3, r3, #8
 80003d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003dc:	4b92      	ldr	r3, [pc, #584]	; (8000628 <MX_GPIO_Init+0x308>)
 80003de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003e2:	f003 0308 	and.w	r3, r3, #8
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2102      	movs	r1, #2
 80003ee:	488f      	ldr	r0, [pc, #572]	; (800062c <MX_GPIO_Init+0x30c>)
 80003f0:	f000 fe84 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 PE6 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 80003f4:	2373      	movs	r3, #115	; 0x73
 80003f6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003f8:	2302      	movs	r3, #2
 80003fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	2300      	movs	r3, #0
 80003fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000400:	2300      	movs	r3, #0
 8000402:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000404:	230d      	movs	r3, #13
 8000406:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000408:	f107 031c 	add.w	r3, r7, #28
 800040c:	4619      	mov	r1, r3
 800040e:	4888      	ldr	r0, [pc, #544]	; (8000630 <MX_GPIO_Init+0x310>)
 8000410:	f000 fcc4 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000414:	2301      	movs	r3, #1
 8000416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000418:	2302      	movs	r3, #2
 800041a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	2300      	movs	r3, #0
 800041e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000420:	2300      	movs	r3, #0
 8000422:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000424:	2308      	movs	r3, #8
 8000426:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000428:	f107 031c 	add.w	r3, r7, #28
 800042c:	4619      	mov	r1, r3
 800042e:	487f      	ldr	r0, [pc, #508]	; (800062c <MX_GPIO_Init+0x30c>)
 8000430:	f000 fcb4 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000434:	2302      	movs	r3, #2
 8000436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000438:	2301      	movs	r3, #1
 800043a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000440:	2300      	movs	r3, #0
 8000442:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000444:	f107 031c 	add.w	r3, r7, #28
 8000448:	4619      	mov	r1, r3
 800044a:	4878      	ldr	r0, [pc, #480]	; (800062c <MX_GPIO_Init+0x30c>)
 800044c:	f000 fca6 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000450:	230c      	movs	r3, #12
 8000452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000454:	2302      	movs	r3, #2
 8000456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000458:	2300      	movs	r3, #0
 800045a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2300      	movs	r3, #0
 800045e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000460:	2307      	movs	r3, #7
 8000462:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000464:	f107 031c 	add.w	r3, r7, #28
 8000468:	4619      	mov	r1, r3
 800046a:	4870      	ldr	r0, [pc, #448]	; (800062c <MX_GPIO_Init+0x30c>)
 800046c:	f000 fc96 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000470:	2350      	movs	r3, #80	; 0x50
 8000472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000474:	2302      	movs	r3, #2
 8000476:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047c:	2300      	movs	r3, #0
 800047e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000480:	230d      	movs	r3, #13
 8000482:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000484:	f107 031c 	add.w	r3, r7, #28
 8000488:	4619      	mov	r1, r3
 800048a:	4868      	ldr	r0, [pc, #416]	; (800062c <MX_GPIO_Init+0x30c>)
 800048c:	f000 fc86 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000490:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000496:	2302      	movs	r3, #2
 8000498:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	2300      	movs	r3, #0
 80004a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80004a2:	2307      	movs	r3, #7
 80004a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004a6:	f107 031c 	add.w	r3, r7, #28
 80004aa:	4619      	mov	r1, r3
 80004ac:	4860      	ldr	r0, [pc, #384]	; (8000630 <MX_GPIO_Init+0x310>)
 80004ae:	f000 fc75 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80004b2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80004b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b8:	2302      	movs	r3, #2
 80004ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c0:	2300      	movs	r3, #0
 80004c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80004c4:	2305      	movs	r3, #5
 80004c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004c8:	f107 031c 	add.w	r3, r7, #28
 80004cc:	4619      	mov	r1, r3
 80004ce:	4858      	ldr	r0, [pc, #352]	; (8000630 <MX_GPIO_Init+0x310>)
 80004d0:	f000 fc64 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DCMI_SCL_Pin|DCMI_SDA_Pin;
 80004d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80004d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004da:	2312      	movs	r3, #18
 80004dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e2:	2300      	movs	r3, #0
 80004e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80004e6:	2304      	movs	r3, #4
 80004e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ea:	f107 031c 	add.w	r3, r7, #28
 80004ee:	4619      	mov	r1, r3
 80004f0:	4850      	ldr	r0, [pc, #320]	; (8000634 <MX_GPIO_Init+0x314>)
 80004f2:	f000 fc53 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80004f6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80004fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fc:	2302      	movs	r3, #2
 80004fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000504:	2300      	movs	r3, #0
 8000506:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000508:	2305      	movs	r3, #5
 800050a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050c:	f107 031c 	add.w	r3, r7, #28
 8000510:	4619      	mov	r1, r3
 8000512:	4848      	ldr	r0, [pc, #288]	; (8000634 <MX_GPIO_Init+0x314>)
 8000514:	f000 fc42 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000518:	f44f 7340 	mov.w	r3, #768	; 0x300
 800051c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051e:	2302      	movs	r3, #2
 8000520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	2300      	movs	r3, #0
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000526:	2300      	movs	r3, #0
 8000528:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800052a:	2307      	movs	r3, #7
 800052c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800052e:	f107 031c 	add.w	r3, r7, #28
 8000532:	4619      	mov	r1, r3
 8000534:	4840      	ldr	r0, [pc, #256]	; (8000638 <MX_GPIO_Init+0x318>)
 8000536:	f000 fc31 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800053a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800053e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000540:	2312      	movs	r3, #18
 8000542:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2300      	movs	r3, #0
 800054a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800054c:	2304      	movs	r3, #4
 800054e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000550:	f107 031c 	add.w	r3, r7, #28
 8000554:	4619      	mov	r1, r3
 8000556:	4838      	ldr	r0, [pc, #224]	; (8000638 <MX_GPIO_Init+0x318>)
 8000558:	f000 fc20 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800055c:	23c0      	movs	r3, #192	; 0xc0
 800055e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000560:	2302      	movs	r3, #2
 8000562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800056c:	230d      	movs	r3, #13
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000570:	f107 031c 	add.w	r3, r7, #28
 8000574:	4619      	mov	r1, r3
 8000576:	4831      	ldr	r0, [pc, #196]	; (800063c <MX_GPIO_Init+0x31c>)
 8000578:	f000 fc10 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800057c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000580:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000582:	2302      	movs	r3, #2
 8000584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800058a:	2303      	movs	r3, #3
 800058c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800058e:	230c      	movs	r3, #12
 8000590:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000592:	f107 031c 	add.w	r3, r7, #28
 8000596:	4619      	mov	r1, r3
 8000598:	4828      	ldr	r0, [pc, #160]	; (800063c <MX_GPIO_Init+0x31c>)
 800059a:	f000 fbff 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800059e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005b0:	2307      	movs	r3, #7
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	f107 031c 	add.w	r3, r7, #28
 80005b8:	4619      	mov	r1, r3
 80005ba:	481c      	ldr	r0, [pc, #112]	; (800062c <MX_GPIO_Init+0x30c>)
 80005bc:	f000 fbee 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c6:	2302      	movs	r3, #2
 80005c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2300      	movs	r3, #0
 80005d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80005d2:	230a      	movs	r3, #10
 80005d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4619      	mov	r1, r3
 80005dc:	4813      	ldr	r0, [pc, #76]	; (800062c <MX_GPIO_Init+0x30c>)
 80005de:	f000 fbdd 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005e2:	2303      	movs	r3, #3
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80005f2:	2309      	movs	r3, #9
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	480e      	ldr	r0, [pc, #56]	; (8000638 <MX_GPIO_Init+0x318>)
 80005fe:	f000 fbcd 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000602:	2304      	movs	r3, #4
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000606:	2302      	movs	r3, #2
 8000608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060e:	2303      	movs	r3, #3
 8000610:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000612:	230c      	movs	r3, #12
 8000614:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	4619      	mov	r1, r3
 800061c:	4806      	ldr	r0, [pc, #24]	; (8000638 <MX_GPIO_Init+0x318>)
 800061e:	f000 fbbd 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000622:	2308      	movs	r3, #8
 8000624:	e00c      	b.n	8000640 <MX_GPIO_Init+0x320>
 8000626:	bf00      	nop
 8000628:	58024400 	.word	0x58024400
 800062c:	58020000 	.word	0x58020000
 8000630:	58021000 	.word	0x58021000
 8000634:	58020400 	.word	0x58020400
 8000638:	58020c00 	.word	0x58020c00
 800063c:	58020800 	.word	0x58020800
 8000640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000642:	2302      	movs	r3, #2
 8000644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800064e:	230d      	movs	r3, #13
 8000650:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000652:	f107 031c 	add.w	r3, r7, #28
 8000656:	4619      	mov	r1, r3
 8000658:	482b      	ldr	r0, [pc, #172]	; (8000708 <MX_GPIO_Init+0x3e8>)
 800065a:	f000 fb9f 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800065e:	2380      	movs	r3, #128	; 0x80
 8000660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000662:	2302      	movs	r3, #2
 8000664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800066e:	2305      	movs	r3, #5
 8000670:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	4823      	ldr	r0, [pc, #140]	; (8000708 <MX_GPIO_Init+0x3e8>)
 800067a:	f000 fb8f 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800067e:	2318      	movs	r3, #24
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800068e:	2305      	movs	r3, #5
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	4619      	mov	r1, r3
 8000698:	481c      	ldr	r0, [pc, #112]	; (800070c <MX_GPIO_Init+0x3ec>)
 800069a:	f000 fb7f 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800069e:	2360      	movs	r3, #96	; 0x60
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a2:	2302      	movs	r3, #2
 80006a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80006ae:	2309      	movs	r3, #9
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4814      	ldr	r0, [pc, #80]	; (800070c <MX_GPIO_Init+0x3ec>)
 80006ba:	f000 fb6f 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80006ce:	230d      	movs	r3, #13
 80006d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4619      	mov	r1, r3
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <MX_GPIO_Init+0x3ec>)
 80006da:	f000 fb5f 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006e4:	2312      	movs	r3, #18
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006f0:	2304      	movs	r3, #4
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4619      	mov	r1, r3
 80006fa:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_GPIO_Init+0x3ec>)
 80006fc:	f000 fb4e 	bl	8000d9c <HAL_GPIO_Init>

}
 8000700:	bf00      	nop
 8000702:	3730      	adds	r7, #48	; 0x30
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	58020c00 	.word	0x58020c00
 800070c:	58020400 	.word	0x58020400

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f000 f9fa 	bl	8000b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f80a 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f7ff fe00 	bl	8000320 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000720:	f002 f838 	bl	8002794 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000724:	f7ff fddc 	bl	80002e0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000728:	f002 f858 	bl	80027dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800072c:	e7fe      	b.n	800072c <main+0x1c>
	...

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b09c      	sub	sp, #112	; 0x70
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073a:	224c      	movs	r2, #76	; 0x4c
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f004 fdd8 	bl	80052f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2220      	movs	r2, #32
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f004 fdd2 	bl	80052f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000750:	2002      	movs	r0, #2
 8000752:	f000 fd07 	bl	8001164 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b31      	ldr	r3, [pc, #196]	; (8000820 <SystemClock_Config+0xf0>)
 800075c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800075e:	4a30      	ldr	r2, [pc, #192]	; (8000820 <SystemClock_Config+0xf0>)
 8000760:	f023 0301 	bic.w	r3, r3, #1
 8000764:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000766:	4b2e      	ldr	r3, [pc, #184]	; (8000820 <SystemClock_Config+0xf0>)
 8000768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <SystemClock_Config+0xf4>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000778:	4a2a      	ldr	r2, [pc, #168]	; (8000824 <SystemClock_Config+0xf4>)
 800077a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b28      	ldr	r3, [pc, #160]	; (8000824 <SystemClock_Config+0xf4>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800078c:	bf00      	nop
 800078e:	4b25      	ldr	r3, [pc, #148]	; (8000824 <SystemClock_Config+0xf4>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800079a:	d1f8      	bne.n	800078e <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800079c:	2301      	movs	r3, #1
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 80007b2:	2310      	movs	r3, #16
 80007b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007c2:	230c      	movs	r3, #12
 80007c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fd00 	bl	80011d8 <HAL_RCC_OscConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80007de:	f000 f832 	bl	8000846 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e2:	233f      	movs	r3, #63	; 0x3f
 80007e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e6:	2303      	movs	r3, #3
 80007e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2102      	movs	r1, #2
 8000806:	4618      	mov	r0, r3
 8000808:	f001 f8f6 	bl	80019f8 <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000812:	f000 f818 	bl	8000846 <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3770      	adds	r7, #112	; 0x70
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	58000400 	.word	0x58000400
 8000824:	58024800 	.word	0x58024800

08000828 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000838:	d101      	bne.n	800083e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800083a:	f000 f9a3 	bl	8000b84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084a:	b672      	cpsid	i
}
 800084c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084e:	e7fe      	b.n	800084e <Error_Handler+0x8>

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <HAL_MspInit+0x38>)
 8000858:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800085c:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <HAL_MspInit+0x38>)
 800085e:	f043 0302 	orr.w	r3, r3, #2
 8000862:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_MspInit+0x38>)
 8000868:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800086c:	f003 0302 	and.w	r3, r3, #2
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	210f      	movs	r1, #15
 8000878:	f06f 0001 	mvn.w	r0, #1
 800087c:	f000 fa66 	bl	8000d4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	58024400 	.word	0x58024400

0800088c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b090      	sub	sp, #64	; 0x40
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b0f      	cmp	r3, #15
 8000898:	d827      	bhi.n	80008ea <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 800089a:	2200      	movs	r2, #0
 800089c:	6879      	ldr	r1, [r7, #4]
 800089e:	201c      	movs	r0, #28
 80008a0:	f000 fa54 	bl	8000d4c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008a4:	201c      	movs	r0, #28
 80008a6:	f000 fa6b 	bl	8000d80 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80008aa:	4a29      	ldr	r2, [pc, #164]	; (8000950 <HAL_InitTick+0xc4>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80008b0:	4b28      	ldr	r3, [pc, #160]	; (8000954 <HAL_InitTick+0xc8>)
 80008b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008b6:	4a27      	ldr	r2, [pc, #156]	; (8000954 <HAL_InitTick+0xc8>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80008c0:	4b24      	ldr	r3, [pc, #144]	; (8000954 <HAL_InitTick+0xc8>)
 80008c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ce:	f107 0210 	add.w	r2, r7, #16
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4611      	mov	r1, r2
 80008d8:	4618      	mov	r0, r3
 80008da:	f001 fc03 	bl	80020e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d106      	bne.n	80008f6 <HAL_InitTick+0x6a>
 80008e8:	e001      	b.n	80008ee <HAL_InitTick+0x62>
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e02c      	b.n	8000948 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008ee:	f001 fbe3 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 80008f2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80008f4:	e004      	b.n	8000900 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008f6:	f001 fbdf 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 80008fa:	4603      	mov	r3, r0
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000902:	4a15      	ldr	r2, [pc, #84]	; (8000958 <HAL_InitTick+0xcc>)
 8000904:	fba2 2303 	umull	r2, r3, r2, r3
 8000908:	0c9b      	lsrs	r3, r3, #18
 800090a:	3b01      	subs	r3, #1
 800090c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <HAL_InitTick+0xd0>)
 8000910:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000914:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <HAL_InitTick+0xd0>)
 8000918:	f240 32e7 	movw	r2, #999	; 0x3e7
 800091c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800091e:	4a0f      	ldr	r2, [pc, #60]	; (800095c <HAL_InitTick+0xd0>)
 8000920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000922:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <HAL_InitTick+0xd0>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_InitTick+0xd0>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000930:	480a      	ldr	r0, [pc, #40]	; (800095c <HAL_InitTick+0xd0>)
 8000932:	f001 fc19 	bl	8002168 <HAL_TIM_Base_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d104      	bne.n	8000946 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800093c:	4807      	ldr	r0, [pc, #28]	; (800095c <HAL_InitTick+0xd0>)
 800093e:	f001 fc75 	bl	800222c <HAL_TIM_Base_Start_IT>
 8000942:	4603      	mov	r3, r0
 8000944:	e000      	b.n	8000948 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
}
 8000948:	4618      	mov	r0, r3
 800094a:	3740      	adds	r7, #64	; 0x40
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	24000008 	.word	0x24000008
 8000954:	58024400 	.word	0x58024400
 8000958:	431bde83 	.word	0x431bde83
 800095c:	24004a6c 	.word	0x24004a6c

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <NMI_Handler+0x4>

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <MemManage_Handler+0x4>

08000972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <UsageFault_Handler+0x4>

0800097e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <TIM2_IRQHandler+0x10>)
 8000992:	f001 fcbb 	bl	800230c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	24004a6c 	.word	0x24004a6c

080009a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009a4:	4b39      	ldr	r3, [pc, #228]	; (8000a8c <SystemInit+0xec>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009aa:	4a38      	ldr	r2, [pc, #224]	; (8000a8c <SystemInit+0xec>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009b4:	4b36      	ldr	r3, [pc, #216]	; (8000a90 <SystemInit+0xf0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f003 030f 	and.w	r3, r3, #15
 80009bc:	2b06      	cmp	r3, #6
 80009be:	d807      	bhi.n	80009d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009c0:	4b33      	ldr	r3, [pc, #204]	; (8000a90 <SystemInit+0xf0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f023 030f 	bic.w	r3, r3, #15
 80009c8:	4a31      	ldr	r2, [pc, #196]	; (8000a90 <SystemInit+0xf0>)
 80009ca:	f043 0307 	orr.w	r3, r3, #7
 80009ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009d0:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <SystemInit+0xf4>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a2f      	ldr	r2, [pc, #188]	; (8000a94 <SystemInit+0xf4>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009dc:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <SystemInit+0xf4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <SystemInit+0xf4>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	492b      	ldr	r1, [pc, #172]	; (8000a94 <SystemInit+0xf4>)
 80009e8:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <SystemInit+0xf8>)
 80009ea:	4013      	ands	r3, r2
 80009ec:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <SystemInit+0xf0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d007      	beq.n	8000a0a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009fa:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <SystemInit+0xf0>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f023 030f 	bic.w	r3, r3, #15
 8000a02:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <SystemInit+0xf0>)
 8000a04:	f043 0307 	orr.w	r3, r3, #7
 8000a08:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a0a:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <SystemInit+0xf4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a10:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <SystemInit+0xf4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <SystemInit+0xf4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <SystemInit+0xf4>)
 8000a1e:	4a1f      	ldr	r2, [pc, #124]	; (8000a9c <SystemInit+0xfc>)
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <SystemInit+0xf4>)
 8000a24:	4a1e      	ldr	r2, [pc, #120]	; (8000aa0 <SystemInit+0x100>)
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <SystemInit+0xf4>)
 8000a2a:	4a1e      	ldr	r2, [pc, #120]	; (8000aa4 <SystemInit+0x104>)
 8000a2c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <SystemInit+0xf4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <SystemInit+0xf4>)
 8000a36:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <SystemInit+0x104>)
 8000a38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <SystemInit+0xf4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <SystemInit+0xf4>)
 8000a42:	4a18      	ldr	r2, [pc, #96]	; (8000aa4 <SystemInit+0x104>)
 8000a44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <SystemInit+0xf4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <SystemInit+0xf4>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <SystemInit+0xf4>)
 8000a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <SystemInit+0xf4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <SystemInit+0x108>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <SystemInit+0x10c>)
 8000a64:	4013      	ands	r3, r2
 8000a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a6a:	d202      	bcs.n	8000a72 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <SystemInit+0x110>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <SystemInit+0x114>)
 8000a74:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a78:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SystemInit+0xec>)
 8000a7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a80:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00
 8000a90:	52002000 	.word	0x52002000
 8000a94:	58024400 	.word	0x58024400
 8000a98:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a9c:	02020200 	.word	0x02020200
 8000aa0:	01ff0000 	.word	0x01ff0000
 8000aa4:	01010280 	.word	0x01010280
 8000aa8:	5c001000 	.word	0x5c001000
 8000aac:	ffff0000 	.word	0xffff0000
 8000ab0:	51008108 	.word	0x51008108
 8000ab4:	52004000 	.word	0x52004000

08000ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000abc:	f7ff ff70 	bl	80009a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ac2:	490d      	ldr	r1, [pc, #52]	; (8000af8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	; (8000b04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f004 fbd1 	bl	800528c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aea:	f7ff fe11 	bl	8000710 <main>
  bx  lr
 8000aee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000af4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000af8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000afc:	08005564 	.word	0x08005564
  ldr r2, =_sbss
 8000b00:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000b04:	24004b08 	.word	0x24004b08

08000b08 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC3_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b12:	2003      	movs	r0, #3
 8000b14:	f000 f90f 	bl	8000d36 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b18:	f001 f924 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_Init+0x68>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	0a1b      	lsrs	r3, r3, #8
 8000b24:	f003 030f 	and.w	r3, r3, #15
 8000b28:	4913      	ldr	r1, [pc, #76]	; (8000b78 <HAL_Init+0x6c>)
 8000b2a:	5ccb      	ldrb	r3, [r1, r3]
 8000b2c:	f003 031f 	and.w	r3, r3, #31
 8000b30:	fa22 f303 	lsr.w	r3, r2, r3
 8000b34:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <HAL_Init+0x68>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	f003 030f 	and.w	r3, r3, #15
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <HAL_Init+0x6c>)
 8000b40:	5cd3      	ldrb	r3, [r2, r3]
 8000b42:	f003 031f 	and.w	r3, r3, #31
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	fa22 f303 	lsr.w	r3, r2, r3
 8000b4c:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <HAL_Init+0x70>)
 8000b4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b50:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <HAL_Init+0x74>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b56:	200f      	movs	r0, #15
 8000b58:	f7ff fe98 	bl	800088c <HAL_InitTick>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e002      	b.n	8000b6c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b66:	f7ff fe73 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	58024400 	.word	0x58024400
 8000b78:	080054ec 	.word	0x080054ec
 8000b7c:	24000004 	.word	0x24000004
 8000b80:	24000000 	.word	0x24000000

08000b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	2400000c 	.word	0x2400000c
 8000ba8:	24004ab8 	.word	0x24004ab8

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	24004ab8 	.word	0x24004ab8

08000bc4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_GetREVID+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	0c1b      	lsrs	r3, r3, #16
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	5c001000 	.word	0x5c001000

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <__NVIC_SetPriorityGrouping+0x40>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	4313      	orrs	r3, r2
 8000c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <__NVIC_SetPriorityGrouping+0x40>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	60d3      	str	r3, [r2, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00
 8000c20:	05fa0000 	.word	0x05fa0000

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db0b      	blt.n	8000c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	f003 021f 	and.w	r2, r3, #31
 8000c58:	4907      	ldr	r1, [pc, #28]	; (8000c78 <__NVIC_EnableIRQ+0x38>)
 8000c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c5e:	095b      	lsrs	r3, r3, #5
 8000c60:	2001      	movs	r0, #1
 8000c62:	fa00 f202 	lsl.w	r2, r0, r2
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ff4c 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5a:	f7ff ff63 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000d5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	68b9      	ldr	r1, [r7, #8]
 8000d64:	6978      	ldr	r0, [r7, #20]
 8000d66:	f7ff ffb3 	bl	8000cd0 <NVIC_EncodePriority>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff82 	bl	8000c7c <__NVIC_SetPriority>
}
 8000d78:	bf00      	nop
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff56 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000daa:	4b89      	ldr	r3, [pc, #548]	; (8000fd0 <HAL_GPIO_Init+0x234>)
 8000dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000dae:	e194      	b.n	80010da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	2101      	movs	r1, #1
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 8186 	beq.w	80010d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d00b      	beq.n	8000de8 <HAL_GPIO_Init+0x4c>
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d007      	beq.n	8000de8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ddc:	2b11      	cmp	r3, #17
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b12      	cmp	r3, #18
 8000de6:	d130      	bne.n	8000e4a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	2203      	movs	r2, #3
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e1e:	2201      	movs	r2, #1
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	091b      	lsrs	r3, r3, #4
 8000e34:	f003 0201 	and.w	r2, r3, #1
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0xee>
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b12      	cmp	r3, #18
 8000e88:	d123      	bne.n	8000ed2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	08da      	lsrs	r2, r3, #3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3208      	adds	r2, #8
 8000e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	220f      	movs	r2, #15
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	691a      	ldr	r2, [r3, #16]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	08da      	lsrs	r2, r3, #3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3208      	adds	r2, #8
 8000ecc:	69b9      	ldr	r1, [r7, #24]
 8000ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 0203 	and.w	r2, r3, #3
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 80e0 	beq.w	80010d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f14:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <HAL_GPIO_Init+0x238>)
 8000f16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f1a:	4a2e      	ldr	r2, [pc, #184]	; (8000fd4 <HAL_GPIO_Init+0x238>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f24:	4b2b      	ldr	r3, [pc, #172]	; (8000fd4 <HAL_GPIO_Init+0x238>)
 8000f26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f32:	4a29      	ldr	r2, [pc, #164]	; (8000fd8 <HAL_GPIO_Init+0x23c>)
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	220f      	movs	r2, #15
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a20      	ldr	r2, [pc, #128]	; (8000fdc <HAL_GPIO_Init+0x240>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d052      	beq.n	8001004 <HAL_GPIO_Init+0x268>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a1f      	ldr	r2, [pc, #124]	; (8000fe0 <HAL_GPIO_Init+0x244>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d031      	beq.n	8000fca <HAL_GPIO_Init+0x22e>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a1e      	ldr	r2, [pc, #120]	; (8000fe4 <HAL_GPIO_Init+0x248>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d02b      	beq.n	8000fc6 <HAL_GPIO_Init+0x22a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <HAL_GPIO_Init+0x24c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d025      	beq.n	8000fc2 <HAL_GPIO_Init+0x226>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a1c      	ldr	r2, [pc, #112]	; (8000fec <HAL_GPIO_Init+0x250>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d01f      	beq.n	8000fbe <HAL_GPIO_Init+0x222>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <HAL_GPIO_Init+0x254>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d019      	beq.n	8000fba <HAL_GPIO_Init+0x21e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a1a      	ldr	r2, [pc, #104]	; (8000ff4 <HAL_GPIO_Init+0x258>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d013      	beq.n	8000fb6 <HAL_GPIO_Init+0x21a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <HAL_GPIO_Init+0x25c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d00d      	beq.n	8000fb2 <HAL_GPIO_Init+0x216>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <HAL_GPIO_Init+0x260>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d007      	beq.n	8000fae <HAL_GPIO_Init+0x212>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a17      	ldr	r2, [pc, #92]	; (8001000 <HAL_GPIO_Init+0x264>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_GPIO_Init+0x20e>
 8000fa6:	2309      	movs	r3, #9
 8000fa8:	e02d      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000faa:	230a      	movs	r3, #10
 8000fac:	e02b      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000fae:	2308      	movs	r3, #8
 8000fb0:	e029      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	e027      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	e025      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000fba:	2305      	movs	r3, #5
 8000fbc:	e023      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	e021      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e01f      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e01d      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e01b      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000fce:	bf00      	nop
 8000fd0:	58000080 	.word	0x58000080
 8000fd4:	58024400 	.word	0x58024400
 8000fd8:	58000400 	.word	0x58000400
 8000fdc:	58020000 	.word	0x58020000
 8000fe0:	58020400 	.word	0x58020400
 8000fe4:	58020800 	.word	0x58020800
 8000fe8:	58020c00 	.word	0x58020c00
 8000fec:	58021000 	.word	0x58021000
 8000ff0:	58021400 	.word	0x58021400
 8000ff4:	58021800 	.word	0x58021800
 8000ff8:	58021c00 	.word	0x58021c00
 8000ffc:	58022000 	.word	0x58022000
 8001000:	58022400 	.word	0x58022400
 8001004:	2300      	movs	r3, #0
 8001006:	69fa      	ldr	r2, [r7, #28]
 8001008:	f002 0203 	and.w	r2, r2, #3
 800100c:	0092      	lsls	r2, r2, #2
 800100e:	4093      	lsls	r3, r2
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001016:	4938      	ldr	r1, [pc, #224]	; (80010f8 <HAL_GPIO_Init+0x35c>)
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800109e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80010a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80010cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	3301      	adds	r3, #1
 80010d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa22 f303 	lsr.w	r3, r2, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f47f ae63 	bne.w	8000db0 <HAL_GPIO_Init+0x14>
  }
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	3724      	adds	r7, #36	; 0x24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	58000400 	.word	0x58000400

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001118:	e003      	b.n	8001122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	619a      	str	r2, [r3, #24]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800112e:	b480      	push	{r7}
 8001130:	b085      	sub	sp, #20
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001140:	887a      	ldrh	r2, [r7, #2]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4013      	ands	r3, r2
 8001146:	041a      	lsls	r2, r3, #16
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43d9      	mvns	r1, r3
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	400b      	ands	r3, r1
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	619a      	str	r2, [r3, #24]
}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_PWREx_ConfigSupply+0x70>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	2b04      	cmp	r3, #4
 8001176:	d00a      	beq.n	800118e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_PWREx_ConfigSupply+0x70>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	429a      	cmp	r2, r3
 8001184:	d001      	beq.n	800118a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e01f      	b.n	80011ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e01d      	b.n	80011ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_PWREx_ConfigSupply+0x70>)
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	f023 0207 	bic.w	r2, r3, #7
 8001196:	490f      	ldr	r1, [pc, #60]	; (80011d4 <HAL_PWREx_ConfigSupply+0x70>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4313      	orrs	r3, r2
 800119c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800119e:	f7ff fd05 	bl	8000bac <HAL_GetTick>
 80011a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011a4:	e009      	b.n	80011ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80011a6:	f7ff fd01 	bl	8000bac <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011b4:	d901      	bls.n	80011ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e007      	b.n	80011ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_PWREx_ConfigSupply+0x70>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011c6:	d1ee      	bne.n	80011a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	58024800 	.word	0x58024800

080011d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08c      	sub	sp, #48	; 0x30
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e3ff      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 8087 	beq.w	8001306 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011f8:	4b99      	ldr	r3, [pc, #612]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001202:	4b97      	ldr	r3, [pc, #604]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 8001204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120a:	2b10      	cmp	r3, #16
 800120c:	d007      	beq.n	800121e <HAL_RCC_OscConfig+0x46>
 800120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001210:	2b18      	cmp	r3, #24
 8001212:	d110      	bne.n	8001236 <HAL_RCC_OscConfig+0x5e>
 8001214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d10b      	bne.n	8001236 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121e:	4b90      	ldr	r3, [pc, #576]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d06c      	beq.n	8001304 <HAL_RCC_OscConfig+0x12c>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d168      	bne.n	8001304 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e3d9      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123e:	d106      	bne.n	800124e <HAL_RCC_OscConfig+0x76>
 8001240:	4b87      	ldr	r3, [pc, #540]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a86      	ldr	r2, [pc, #536]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 8001246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	e02e      	b.n	80012ac <HAL_RCC_OscConfig+0xd4>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10c      	bne.n	8001270 <HAL_RCC_OscConfig+0x98>
 8001256:	4b82      	ldr	r3, [pc, #520]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a81      	ldr	r2, [pc, #516]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 800125c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4b7f      	ldr	r3, [pc, #508]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a7e      	ldr	r2, [pc, #504]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 8001268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e01d      	b.n	80012ac <HAL_RCC_OscConfig+0xd4>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001278:	d10c      	bne.n	8001294 <HAL_RCC_OscConfig+0xbc>
 800127a:	4b79      	ldr	r3, [pc, #484]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a78      	ldr	r2, [pc, #480]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 8001280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	4b76      	ldr	r3, [pc, #472]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a75      	ldr	r2, [pc, #468]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 800128c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e00b      	b.n	80012ac <HAL_RCC_OscConfig+0xd4>
 8001294:	4b72      	ldr	r3, [pc, #456]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a71      	ldr	r2, [pc, #452]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 800129a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b6f      	ldr	r3, [pc, #444]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a6e      	ldr	r2, [pc, #440]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 80012a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d013      	beq.n	80012dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff fc7a 	bl	8000bac <HAL_GetTick>
 80012b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012bc:	f7ff fc76 	bl	8000bac <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b64      	cmp	r3, #100	; 0x64
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e38d      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012ce:	4b64      	ldr	r3, [pc, #400]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f0      	beq.n	80012bc <HAL_RCC_OscConfig+0xe4>
 80012da:	e014      	b.n	8001306 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff fc66 	bl	8000bac <HAL_GetTick>
 80012e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e4:	f7ff fc62 	bl	8000bac <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b64      	cmp	r3, #100	; 0x64
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e379      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012f6:	4b5a      	ldr	r3, [pc, #360]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x10c>
 8001302:	e000      	b.n	8001306 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 80ae 	beq.w	8001470 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001314:	4b52      	ldr	r3, [pc, #328]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800131c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800131e:	4b50      	ldr	r3, [pc, #320]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 8001320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001322:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d007      	beq.n	800133a <HAL_RCC_OscConfig+0x162>
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	2b18      	cmp	r3, #24
 800132e:	d13a      	bne.n	80013a6 <HAL_RCC_OscConfig+0x1ce>
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d135      	bne.n	80013a6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800133a:	4b49      	ldr	r3, [pc, #292]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <HAL_RCC_OscConfig+0x17a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e34b      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001352:	f7ff fc37 	bl	8000bc4 <HAL_GetREVID>
 8001356:	4603      	mov	r3, r0
 8001358:	f241 0203 	movw	r2, #4099	; 0x1003
 800135c:	4293      	cmp	r3, r2
 800135e:	d817      	bhi.n	8001390 <HAL_RCC_OscConfig+0x1b8>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	2b40      	cmp	r3, #64	; 0x40
 8001366:	d108      	bne.n	800137a <HAL_RCC_OscConfig+0x1a2>
 8001368:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001370:	4a3b      	ldr	r2, [pc, #236]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 8001372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001376:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001378:	e07a      	b.n	8001470 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137a:	4b39      	ldr	r3, [pc, #228]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	031b      	lsls	r3, r3, #12
 8001388:	4935      	ldr	r1, [pc, #212]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 800138a:	4313      	orrs	r3, r2
 800138c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800138e:	e06f      	b.n	8001470 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001390:	4b33      	ldr	r3, [pc, #204]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	061b      	lsls	r3, r3, #24
 800139e:	4930      	ldr	r1, [pc, #192]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a4:	e064      	b.n	8001470 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d045      	beq.n	800143a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013ae:	4b2c      	ldr	r3, [pc, #176]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 0219 	bic.w	r2, r3, #25
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	4929      	ldr	r1, [pc, #164]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fbf4 	bl	8000bac <HAL_GetTick>
 80013c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c8:	f7ff fbf0 	bl	8000bac <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e307      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013da:	4b21      	ldr	r3, [pc, #132]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e6:	f7ff fbed 	bl	8000bc4 <HAL_GetREVID>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d817      	bhi.n	8001424 <HAL_RCC_OscConfig+0x24c>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	2b40      	cmp	r3, #64	; 0x40
 80013fa:	d108      	bne.n	800140e <HAL_RCC_OscConfig+0x236>
 80013fc:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001404:	4a16      	ldr	r2, [pc, #88]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 8001406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140a:	6053      	str	r3, [r2, #4]
 800140c:	e030      	b.n	8001470 <HAL_RCC_OscConfig+0x298>
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	031b      	lsls	r3, r3, #12
 800141c:	4910      	ldr	r1, [pc, #64]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 800141e:	4313      	orrs	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
 8001422:	e025      	b.n	8001470 <HAL_RCC_OscConfig+0x298>
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	061b      	lsls	r3, r3, #24
 8001432:	490b      	ldr	r1, [pc, #44]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 8001434:	4313      	orrs	r3, r2
 8001436:	604b      	str	r3, [r1, #4]
 8001438:	e01a      	b.n	8001470 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a08      	ldr	r2, [pc, #32]	; (8001460 <HAL_RCC_OscConfig+0x288>)
 8001440:	f023 0301 	bic.w	r3, r3, #1
 8001444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff fbb1 	bl	8000bac <HAL_GetTick>
 800144a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800144c:	e00a      	b.n	8001464 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144e:	f7ff fbad 	bl	8000bac <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d903      	bls.n	8001464 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e2c4      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
 8001460:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001464:	4ba4      	ldr	r3, [pc, #656]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1ee      	bne.n	800144e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0310 	and.w	r3, r3, #16
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 80a9 	beq.w	80015d0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800147e:	4b9e      	ldr	r3, [pc, #632]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001486:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001488:	4b9b      	ldr	r3, [pc, #620]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 800148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	2b08      	cmp	r3, #8
 8001492:	d007      	beq.n	80014a4 <HAL_RCC_OscConfig+0x2cc>
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2b18      	cmp	r3, #24
 8001498:	d13a      	bne.n	8001510 <HAL_RCC_OscConfig+0x338>
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d135      	bne.n	8001510 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014a4:	4b94      	ldr	r3, [pc, #592]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_OscConfig+0x2e4>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	2b80      	cmp	r3, #128	; 0x80
 80014b6:	d001      	beq.n	80014bc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e296      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014bc:	f7ff fb82 	bl	8000bc4 <HAL_GetREVID>
 80014c0:	4603      	mov	r3, r0
 80014c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d817      	bhi.n	80014fa <HAL_RCC_OscConfig+0x322>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	2b20      	cmp	r3, #32
 80014d0:	d108      	bne.n	80014e4 <HAL_RCC_OscConfig+0x30c>
 80014d2:	4b89      	ldr	r3, [pc, #548]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80014da:	4a87      	ldr	r2, [pc, #540]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 80014dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014e0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014e2:	e075      	b.n	80015d0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014e4:	4b84      	ldr	r3, [pc, #528]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	069b      	lsls	r3, r3, #26
 80014f2:	4981      	ldr	r1, [pc, #516]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014f8:	e06a      	b.n	80015d0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014fa:	4b7f      	ldr	r3, [pc, #508]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	061b      	lsls	r3, r3, #24
 8001508:	497b      	ldr	r1, [pc, #492]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 800150a:	4313      	orrs	r3, r2
 800150c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800150e:	e05f      	b.n	80015d0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d042      	beq.n	800159e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001518:	4b77      	ldr	r3, [pc, #476]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a76      	ldr	r2, [pc, #472]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 800151e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff fb42 	bl	8000bac <HAL_GetTick>
 8001528:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800152c:	f7ff fb3e 	bl	8000bac <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e255      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800153e:	4b6e      	ldr	r3, [pc, #440]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800154a:	f7ff fb3b 	bl	8000bc4 <HAL_GetREVID>
 800154e:	4603      	mov	r3, r0
 8001550:	f241 0203 	movw	r2, #4099	; 0x1003
 8001554:	4293      	cmp	r3, r2
 8001556:	d817      	bhi.n	8001588 <HAL_RCC_OscConfig+0x3b0>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	2b20      	cmp	r3, #32
 800155e:	d108      	bne.n	8001572 <HAL_RCC_OscConfig+0x39a>
 8001560:	4b65      	ldr	r3, [pc, #404]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001568:	4a63      	ldr	r2, [pc, #396]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 800156a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800156e:	6053      	str	r3, [r2, #4]
 8001570:	e02e      	b.n	80015d0 <HAL_RCC_OscConfig+0x3f8>
 8001572:	4b61      	ldr	r3, [pc, #388]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	069b      	lsls	r3, r3, #26
 8001580:	495d      	ldr	r1, [pc, #372]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
 8001586:	e023      	b.n	80015d0 <HAL_RCC_OscConfig+0x3f8>
 8001588:	4b5b      	ldr	r3, [pc, #364]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	061b      	lsls	r3, r3, #24
 8001596:	4958      	ldr	r1, [pc, #352]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 8001598:	4313      	orrs	r3, r2
 800159a:	60cb      	str	r3, [r1, #12]
 800159c:	e018      	b.n	80015d0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800159e:	4b56      	ldr	r3, [pc, #344]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a55      	ldr	r2, [pc, #340]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 80015a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015aa:	f7ff faff 	bl	8000bac <HAL_GetTick>
 80015ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80015b2:	f7ff fafb 	bl	8000bac <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e212      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015c4:	4b4c      	ldr	r3, [pc, #304]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1f0      	bne.n	80015b2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d036      	beq.n	800164a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d019      	beq.n	8001618 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e4:	4b44      	ldr	r3, [pc, #272]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 80015e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e8:	4a43      	ldr	r2, [pc, #268]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff fadc 	bl	8000bac <HAL_GetTick>
 80015f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f8:	f7ff fad8 	bl	8000bac <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e1ef      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800160a:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 800160c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x420>
 8001616:	e018      	b.n	800164a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001618:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 800161a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800161c:	4a36      	ldr	r2, [pc, #216]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001624:	f7ff fac2 	bl	8000bac <HAL_GetTick>
 8001628:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800162c:	f7ff fabe 	bl	8000bac <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e1d5      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800163e:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 8001640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	2b00      	cmp	r3, #0
 8001654:	d036      	beq.n	80016c4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d019      	beq.n	8001692 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800165e:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a25      	ldr	r2, [pc, #148]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 8001664:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001668:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800166a:	f7ff fa9f 	bl	8000bac <HAL_GetTick>
 800166e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001672:	f7ff fa9b 	bl	8000bac <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e1b2      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x49a>
 8001690:	e018      	b.n	80016c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a18      	ldr	r2, [pc, #96]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 8001698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800169c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800169e:	f7ff fa85 	bl	8000bac <HAL_GetTick>
 80016a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80016a6:	f7ff fa81 	bl	8000bac <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e198      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_RCC_OscConfig+0x520>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f0      	bne.n	80016a6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 8085 	beq.w	80017dc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_RCC_OscConfig+0x524>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a09      	ldr	r2, [pc, #36]	; (80016fc <HAL_RCC_OscConfig+0x524>)
 80016d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016de:	f7ff fa65 	bl	8000bac <HAL_GetTick>
 80016e2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016e4:	e00c      	b.n	8001700 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80016e6:	f7ff fa61 	bl	8000bac <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b64      	cmp	r3, #100	; 0x64
 80016f2:	d905      	bls.n	8001700 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e178      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
 80016f8:	58024400 	.word	0x58024400
 80016fc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001700:	4b96      	ldr	r3, [pc, #600]	; (800195c <HAL_RCC_OscConfig+0x784>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0ec      	beq.n	80016e6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d106      	bne.n	8001722 <HAL_RCC_OscConfig+0x54a>
 8001714:	4b92      	ldr	r3, [pc, #584]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 8001716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001718:	4a91      	ldr	r2, [pc, #580]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6713      	str	r3, [r2, #112]	; 0x70
 8001720:	e02d      	b.n	800177e <HAL_RCC_OscConfig+0x5a6>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10c      	bne.n	8001744 <HAL_RCC_OscConfig+0x56c>
 800172a:	4b8d      	ldr	r3, [pc, #564]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172e:	4a8c      	ldr	r2, [pc, #560]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 8001730:	f023 0301 	bic.w	r3, r3, #1
 8001734:	6713      	str	r3, [r2, #112]	; 0x70
 8001736:	4b8a      	ldr	r3, [pc, #552]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173a:	4a89      	ldr	r2, [pc, #548]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 800173c:	f023 0304 	bic.w	r3, r3, #4
 8001740:	6713      	str	r3, [r2, #112]	; 0x70
 8001742:	e01c      	b.n	800177e <HAL_RCC_OscConfig+0x5a6>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b05      	cmp	r3, #5
 800174a:	d10c      	bne.n	8001766 <HAL_RCC_OscConfig+0x58e>
 800174c:	4b84      	ldr	r3, [pc, #528]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001750:	4a83      	ldr	r2, [pc, #524]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6713      	str	r3, [r2, #112]	; 0x70
 8001758:	4b81      	ldr	r3, [pc, #516]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 800175a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175c:	4a80      	ldr	r2, [pc, #512]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6713      	str	r3, [r2, #112]	; 0x70
 8001764:	e00b      	b.n	800177e <HAL_RCC_OscConfig+0x5a6>
 8001766:	4b7e      	ldr	r3, [pc, #504]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 8001768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176a:	4a7d      	ldr	r2, [pc, #500]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	6713      	str	r3, [r2, #112]	; 0x70
 8001772:	4b7b      	ldr	r3, [pc, #492]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001776:	4a7a      	ldr	r2, [pc, #488]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 8001778:	f023 0304 	bic.w	r3, r3, #4
 800177c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d015      	beq.n	80017b2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001786:	f7ff fa11 	bl	8000bac <HAL_GetTick>
 800178a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800178c:	e00a      	b.n	80017a4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f7ff fa0d 	bl	8000bac <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f241 3288 	movw	r2, #5000	; 0x1388
 800179c:	4293      	cmp	r3, r2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e122      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017a4:	4b6e      	ldr	r3, [pc, #440]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 80017a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0ee      	beq.n	800178e <HAL_RCC_OscConfig+0x5b6>
 80017b0:	e014      	b.n	80017dc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b2:	f7ff f9fb 	bl	8000bac <HAL_GetTick>
 80017b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017b8:	e00a      	b.n	80017d0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ba:	f7ff f9f7 	bl	8000bac <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e10c      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017d0:	4b63      	ldr	r3, [pc, #396]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 80017d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1ee      	bne.n	80017ba <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 8101 	beq.w	80019e8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80017e6:	4b5e      	ldr	r3, [pc, #376]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017ee:	2b18      	cmp	r3, #24
 80017f0:	f000 80bc 	beq.w	800196c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	f040 8095 	bne.w	8001928 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fe:	4b58      	ldr	r3, [pc, #352]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a57      	ldr	r2, [pc, #348]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 8001804:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180a:	f7ff f9cf 	bl	8000bac <HAL_GetTick>
 800180e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001812:	f7ff f9cb 	bl	8000bac <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e0e2      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001824:	4b4e      	ldr	r3, [pc, #312]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1f0      	bne.n	8001812 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001830:	4b4b      	ldr	r3, [pc, #300]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 8001832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001834:	4b4b      	ldr	r3, [pc, #300]	; (8001964 <HAL_RCC_OscConfig+0x78c>)
 8001836:	4013      	ands	r3, r2
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	430a      	orrs	r2, r1
 8001844:	4946      	ldr	r1, [pc, #280]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 8001846:	4313      	orrs	r3, r2
 8001848:	628b      	str	r3, [r1, #40]	; 0x28
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	3b01      	subs	r3, #1
 8001850:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001858:	3b01      	subs	r3, #1
 800185a:	025b      	lsls	r3, r3, #9
 800185c:	b29b      	uxth	r3, r3
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001864:	3b01      	subs	r3, #1
 8001866:	041b      	lsls	r3, r3, #16
 8001868:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001872:	3b01      	subs	r3, #1
 8001874:	061b      	lsls	r3, r3, #24
 8001876:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800187a:	4939      	ldr	r1, [pc, #228]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 800187c:	4313      	orrs	r3, r2
 800187e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001880:	4b37      	ldr	r3, [pc, #220]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	4a36      	ldr	r2, [pc, #216]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 8001886:	f023 0301 	bic.w	r3, r3, #1
 800188a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800188c:	4b34      	ldr	r3, [pc, #208]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 800188e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001890:	4b35      	ldr	r3, [pc, #212]	; (8001968 <HAL_RCC_OscConfig+0x790>)
 8001892:	4013      	ands	r3, r2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001898:	00d2      	lsls	r2, r2, #3
 800189a:	4931      	ldr	r1, [pc, #196]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 800189c:	4313      	orrs	r3, r2
 800189e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80018a0:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	f023 020c 	bic.w	r2, r3, #12
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	492c      	ldr	r1, [pc, #176]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80018b2:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	f023 0202 	bic.w	r2, r3, #2
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	4928      	ldr	r1, [pc, #160]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80018c4:	4b26      	ldr	r3, [pc, #152]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	4a25      	ldr	r2, [pc, #148]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 80018ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018d0:	4b23      	ldr	r3, [pc, #140]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	4a22      	ldr	r2, [pc, #136]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 80018d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80018dc:	4b20      	ldr	r3, [pc, #128]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	4a1f      	ldr	r2, [pc, #124]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 80018e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	4a1c      	ldr	r2, [pc, #112]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a19      	ldr	r2, [pc, #100]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 80018fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff f954 	bl	8000bac <HAL_GetTick>
 8001904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001908:	f7ff f950 	bl	8000bac <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e067      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x730>
 8001926:	e05f      	b.n	80019e8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 800192e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7ff f93a 	bl	8000bac <HAL_GetTick>
 8001938:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff f936 	bl	8000bac <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e04d      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <HAL_RCC_OscConfig+0x788>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x764>
 800195a:	e045      	b.n	80019e8 <HAL_RCC_OscConfig+0x810>
 800195c:	58024800 	.word	0x58024800
 8001960:	58024400 	.word	0x58024400
 8001964:	fffffc0c 	.word	0xfffffc0c
 8001968:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800196c:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <HAL_RCC_OscConfig+0x81c>)
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001972:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <HAL_RCC_OscConfig+0x81c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	2b01      	cmp	r3, #1
 800197e:	d031      	beq.n	80019e4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	f003 0203 	and.w	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d12a      	bne.n	80019e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d122      	bne.n	80019e4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d11a      	bne.n	80019e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	0a5b      	lsrs	r3, r3, #9
 80019b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019bc:	429a      	cmp	r2, r3
 80019be:	d111      	bne.n	80019e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	0c1b      	lsrs	r3, r3, #16
 80019c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d108      	bne.n	80019e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	0e1b      	lsrs	r3, r3, #24
 80019d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3730      	adds	r7, #48	; 0x30
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	58024400 	.word	0x58024400

080019f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e19c      	b.n	8001d46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b8a      	ldr	r3, [pc, #552]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d910      	bls.n	8001a3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b87      	ldr	r3, [pc, #540]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 020f 	bic.w	r2, r3, #15
 8001a22:	4985      	ldr	r1, [pc, #532]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2a:	4b83      	ldr	r3, [pc, #524]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e184      	b.n	8001d46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d010      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	4b7b      	ldr	r3, [pc, #492]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d908      	bls.n	8001a6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a58:	4b78      	ldr	r3, [pc, #480]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	4975      	ldr	r1, [pc, #468]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d010      	beq.n	8001a98 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	4b70      	ldr	r3, [pc, #448]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d908      	bls.n	8001a98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a86:	4b6d      	ldr	r3, [pc, #436]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	496a      	ldr	r1, [pc, #424]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d010      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	699a      	ldr	r2, [r3, #24]
 8001aa8:	4b64      	ldr	r3, [pc, #400]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d908      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ab4:	4b61      	ldr	r3, [pc, #388]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	495e      	ldr	r1, [pc, #376]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d010      	beq.n	8001af4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69da      	ldr	r2, [r3, #28]
 8001ad6:	4b59      	ldr	r3, [pc, #356]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d908      	bls.n	8001af4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ae2:	4b56      	ldr	r3, [pc, #344]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	4953      	ldr	r1, [pc, #332]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d010      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	4b4d      	ldr	r3, [pc, #308]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d908      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b10:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f023 020f 	bic.w	r2, r3, #15
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4947      	ldr	r1, [pc, #284]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d055      	beq.n	8001bda <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b2e:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	4940      	ldr	r1, [pc, #256]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d107      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b48:	4b3c      	ldr	r3, [pc, #240]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d121      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0f6      	b.n	8001d46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b60:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d115      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0ea      	b.n	8001d46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b78:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d109      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0de      	b.n	8001d46 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b88:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0d6      	b.n	8001d46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b98:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	f023 0207 	bic.w	r2, r3, #7
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	4925      	ldr	r1, [pc, #148]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001baa:	f7fe ffff 	bl	8000bac <HAL_GetTick>
 8001bae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb2:	f7fe fffb 	bl	8000bac <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e0be      	b.n	8001d46 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d1eb      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d010      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d208      	bcs.n	8001c08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	f023 020f 	bic.w	r2, r3, #15
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	490e      	ldr	r1, [pc, #56]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d214      	bcs.n	8001c40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 020f 	bic.w	r2, r3, #15
 8001c1e:	4906      	ldr	r1, [pc, #24]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e086      	b.n	8001d46 <HAL_RCC_ClockConfig+0x34e>
 8001c38:	52002000 	.word	0x52002000
 8001c3c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d010      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d208      	bcs.n	8001c6e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c5c:	4b3c      	ldr	r3, [pc, #240]	; (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	4939      	ldr	r1, [pc, #228]	; (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d010      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d208      	bcs.n	8001c9c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c8a:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	492e      	ldr	r1, [pc, #184]	; (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d010      	beq.n	8001cca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	4b28      	ldr	r3, [pc, #160]	; (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d208      	bcs.n	8001cca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cb8:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4922      	ldr	r1, [pc, #136]	; (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0320 	and.w	r3, r3, #32
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d010      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69da      	ldr	r2, [r3, #28]
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d208      	bcs.n	8001cf8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	4917      	ldr	r1, [pc, #92]	; (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cf8:	f000 f834 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	4912      	ldr	r1, [pc, #72]	; (8001d54 <HAL_RCC_ClockConfig+0x35c>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
 8001d14:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_RCC_ClockConfig+0x358>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <HAL_RCC_ClockConfig+0x35c>)
 8001d20:	5cd3      	ldrb	r3, [r2, r3]
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <HAL_RCC_ClockConfig+0x360>)
 8001d2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d30:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <HAL_RCC_ClockConfig+0x364>)
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_RCC_ClockConfig+0x368>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fda6 	bl	800088c <HAL_InitTick>
 8001d40:	4603      	mov	r3, r0
 8001d42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	58024400 	.word	0x58024400
 8001d54:	080054ec 	.word	0x080054ec
 8001d58:	24000004 	.word	0x24000004
 8001d5c:	24000000 	.word	0x24000000
 8001d60:	24000008 	.word	0x24000008

08001d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d6a:	4bb3      	ldr	r3, [pc, #716]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d72:	2b18      	cmp	r3, #24
 8001d74:	f200 8155 	bhi.w	8002022 <HAL_RCC_GetSysClockFreq+0x2be>
 8001d78:	a201      	add	r2, pc, #4	; (adr r2, 8001d80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7e:	bf00      	nop
 8001d80:	08001de5 	.word	0x08001de5
 8001d84:	08002023 	.word	0x08002023
 8001d88:	08002023 	.word	0x08002023
 8001d8c:	08002023 	.word	0x08002023
 8001d90:	08002023 	.word	0x08002023
 8001d94:	08002023 	.word	0x08002023
 8001d98:	08002023 	.word	0x08002023
 8001d9c:	08002023 	.word	0x08002023
 8001da0:	08001e0b 	.word	0x08001e0b
 8001da4:	08002023 	.word	0x08002023
 8001da8:	08002023 	.word	0x08002023
 8001dac:	08002023 	.word	0x08002023
 8001db0:	08002023 	.word	0x08002023
 8001db4:	08002023 	.word	0x08002023
 8001db8:	08002023 	.word	0x08002023
 8001dbc:	08002023 	.word	0x08002023
 8001dc0:	08001e11 	.word	0x08001e11
 8001dc4:	08002023 	.word	0x08002023
 8001dc8:	08002023 	.word	0x08002023
 8001dcc:	08002023 	.word	0x08002023
 8001dd0:	08002023 	.word	0x08002023
 8001dd4:	08002023 	.word	0x08002023
 8001dd8:	08002023 	.word	0x08002023
 8001ddc:	08002023 	.word	0x08002023
 8001de0:	08001e17 	.word	0x08001e17
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001de4:	4b94      	ldr	r3, [pc, #592]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0320 	and.w	r3, r3, #32
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d009      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001df0:	4b91      	ldr	r3, [pc, #580]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	08db      	lsrs	r3, r3, #3
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	4a90      	ldr	r2, [pc, #576]	; (800203c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001e00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001e02:	e111      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e04:	4b8d      	ldr	r3, [pc, #564]	; (800203c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e06:	61bb      	str	r3, [r7, #24]
    break;
 8001e08:	e10e      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001e0a:	4b8d      	ldr	r3, [pc, #564]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e0c:	61bb      	str	r3, [r7, #24]
    break;
 8001e0e:	e10b      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001e10:	4b8c      	ldr	r3, [pc, #560]	; (8002044 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e12:	61bb      	str	r3, [r7, #24]
    break;
 8001e14:	e108      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e16:	4b88      	ldr	r3, [pc, #544]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001e20:	4b85      	ldr	r3, [pc, #532]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e2a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e2c:	4b82      	ldr	r3, [pc, #520]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001e36:	4b80      	ldr	r3, [pc, #512]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3a:	08db      	lsrs	r3, r3, #3
 8001e3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e4e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80e1 	beq.w	800201c <HAL_RCC_GetSysClockFreq+0x2b8>
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	f000 8083 	beq.w	8001f68 <HAL_RCC_GetSysClockFreq+0x204>
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	f200 80a1 	bhi.w	8001fac <HAL_RCC_GetSysClockFreq+0x248>
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x114>
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d056      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e76:	e099      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e78:	4b6f      	ldr	r3, [pc, #444]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d02d      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e84:	4b6c      	ldr	r3, [pc, #432]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	4a6b      	ldr	r2, [pc, #428]	; (800203c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
 8001e94:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	ee07 3a90 	vmov	s15, r3
 8001e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eae:	4b62      	ldr	r3, [pc, #392]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ec2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001ede:	e087      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eea:	eddf 6a58 	vldr	s13, [pc, #352]	; 800204c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ef2:	4b51      	ldr	r3, [pc, #324]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f06:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f22:	e065      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	ee07 3a90 	vmov	s15, r3
 8001f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f2e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002050 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f36:	4b40      	ldr	r3, [pc, #256]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f4a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f66:	e043      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f72:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002054 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f7a:	4b2f      	ldr	r3, [pc, #188]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f8e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001faa:	e021      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002050 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fbe:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fd2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002048 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001fee:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001ff0:	4b11      	ldr	r3, [pc, #68]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	0a5b      	lsrs	r3, r3, #9
 8001ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002008:	edd7 6a07 	vldr	s13, [r7, #28]
 800200c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002014:	ee17 3a90 	vmov	r3, s15
 8002018:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800201a:	e005      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
    break;
 8002020:	e002      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002024:	61bb      	str	r3, [r7, #24]
    break;
 8002026:	bf00      	nop
  }

  return sysclockfreq;
 8002028:	69bb      	ldr	r3, [r7, #24]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	; 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	58024400 	.word	0x58024400
 800203c:	03d09000 	.word	0x03d09000
 8002040:	003d0900 	.word	0x003d0900
 8002044:	017d7840 	.word	0x017d7840
 8002048:	46000000 	.word	0x46000000
 800204c:	4c742400 	.word	0x4c742400
 8002050:	4a742400 	.word	0x4a742400
 8002054:	4bbebc20 	.word	0x4bbebc20

08002058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800205e:	f7ff fe81 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8002062:	4602      	mov	r2, r0
 8002064:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	490f      	ldr	r1, [pc, #60]	; (80020ac <HAL_RCC_GetHCLKFreq+0x54>)
 8002070:	5ccb      	ldrb	r3, [r1, r3]
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	fa22 f303 	lsr.w	r3, r2, r3
 800207a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800207c:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	4a09      	ldr	r2, [pc, #36]	; (80020ac <HAL_RCC_GetHCLKFreq+0x54>)
 8002086:	5cd3      	ldrb	r3, [r2, r3]
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	fa22 f303 	lsr.w	r3, r2, r3
 8002092:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002094:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002096:	4a07      	ldr	r2, [pc, #28]	; (80020b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	58024400 	.word	0x58024400
 80020ac:	080054ec 	.word	0x080054ec
 80020b0:	24000004 	.word	0x24000004
 80020b4:	24000000 	.word	0x24000000

080020b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80020bc:	f7ff ffcc 	bl	8002058 <HAL_RCC_GetHCLKFreq>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	4904      	ldr	r1, [pc, #16]	; (80020e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ce:	5ccb      	ldrb	r3, [r1, r3]
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	58024400 	.word	0x58024400
 80020e0:	080054ec 	.word	0x080054ec

080020e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	223f      	movs	r2, #63	; 0x3f
 80020f2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020f4:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <HAL_RCC_GetClockConfig+0x7c>)
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f003 0207 	and.w	r2, r3, #7
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002100:	4b17      	ldr	r3, [pc, #92]	; (8002160 <HAL_RCC_GetClockConfig+0x7c>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <HAL_RCC_GetClockConfig+0x7c>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 020f 	and.w	r2, r3, #15
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_RCC_GetClockConfig+0x7c>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002124:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <HAL_RCC_GetClockConfig+0x7c>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_GetClockConfig+0x7c>)
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_RCC_GetClockConfig+0x7c>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_RCC_GetClockConfig+0x80>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 020f 	and.w	r2, r3, #15
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	601a      	str	r2, [r3, #0]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	58024400 	.word	0x58024400
 8002164:	52002000 	.word	0x52002000

08002168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e049      	b.n	800220e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f841 	bl	8002216 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3304      	adds	r3, #4
 80021a4:	4619      	mov	r1, r3
 80021a6:	4610      	mov	r0, r2
 80021a8:	f000 f9f8 	bl	800259c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d001      	beq.n	8002244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e04f      	b.n	80022e4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d01d      	beq.n	80022a2 <HAL_TIM_Base_Start_IT+0x76>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800226e:	d018      	beq.n	80022a2 <HAL_TIM_Base_Start_IT+0x76>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <HAL_TIM_Base_Start_IT+0x76>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a1e      	ldr	r2, [pc, #120]	; (80022f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d00e      	beq.n	80022a2 <HAL_TIM_Base_Start_IT+0x76>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a1c      	ldr	r2, [pc, #112]	; (80022fc <HAL_TIM_Base_Start_IT+0xd0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d009      	beq.n	80022a2 <HAL_TIM_Base_Start_IT+0x76>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a1b      	ldr	r2, [pc, #108]	; (8002300 <HAL_TIM_Base_Start_IT+0xd4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d004      	beq.n	80022a2 <HAL_TIM_Base_Start_IT+0x76>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a19      	ldr	r2, [pc, #100]	; (8002304 <HAL_TIM_Base_Start_IT+0xd8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d115      	bne.n	80022ce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <HAL_TIM_Base_Start_IT+0xdc>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b06      	cmp	r3, #6
 80022b2:	d015      	beq.n	80022e0 <HAL_TIM_Base_Start_IT+0xb4>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ba:	d011      	beq.n	80022e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022cc:	e008      	b.n	80022e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0201 	orr.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	e000      	b.n	80022e2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	40010000 	.word	0x40010000
 80022f4:	40000400 	.word	0x40000400
 80022f8:	40000800 	.word	0x40000800
 80022fc:	40000c00 	.word	0x40000c00
 8002300:	40010400 	.word	0x40010400
 8002304:	40001800 	.word	0x40001800
 8002308:	00010007 	.word	0x00010007

0800230c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b02      	cmp	r3, #2
 8002320:	d122      	bne.n	8002368 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b02      	cmp	r3, #2
 800232e:	d11b      	bne.n	8002368 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f06f 0202 	mvn.w	r2, #2
 8002338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f905 	bl	800255e <HAL_TIM_IC_CaptureCallback>
 8002354:	e005      	b.n	8002362 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f8f7 	bl	800254a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f908 	bl	8002572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b04      	cmp	r3, #4
 8002374:	d122      	bne.n	80023bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b04      	cmp	r3, #4
 8002382:	d11b      	bne.n	80023bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0204 	mvn.w	r2, #4
 800238c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2202      	movs	r2, #2
 8002392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f8db 	bl	800255e <HAL_TIM_IC_CaptureCallback>
 80023a8:	e005      	b.n	80023b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f8cd 	bl	800254a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f8de 	bl	8002572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d122      	bne.n	8002410 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d11b      	bne.n	8002410 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0208 	mvn.w	r2, #8
 80023e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2204      	movs	r2, #4
 80023e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f8b1 	bl	800255e <HAL_TIM_IC_CaptureCallback>
 80023fc:	e005      	b.n	800240a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f8a3 	bl	800254a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f8b4 	bl	8002572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2b10      	cmp	r3, #16
 800241c:	d122      	bne.n	8002464 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	2b10      	cmp	r3, #16
 800242a:	d11b      	bne.n	8002464 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0210 	mvn.w	r2, #16
 8002434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2208      	movs	r2, #8
 800243a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f887 	bl	800255e <HAL_TIM_IC_CaptureCallback>
 8002450:	e005      	b.n	800245e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f879 	bl	800254a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f88a 	bl	8002572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b01      	cmp	r3, #1
 8002470:	d10e      	bne.n	8002490 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b01      	cmp	r3, #1
 800247e:	d107      	bne.n	8002490 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0201 	mvn.w	r2, #1
 8002488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe f9cc 	bl	8000828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249a:	2b80      	cmp	r3, #128	; 0x80
 800249c:	d10e      	bne.n	80024bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a8:	2b80      	cmp	r3, #128	; 0x80
 80024aa:	d107      	bne.n	80024bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f914 	bl	80026e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ca:	d10e      	bne.n	80024ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d6:	2b80      	cmp	r3, #128	; 0x80
 80024d8:	d107      	bne.n	80024ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f907 	bl	80026f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f4:	2b40      	cmp	r3, #64	; 0x40
 80024f6:	d10e      	bne.n	8002516 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	2b40      	cmp	r3, #64	; 0x40
 8002504:	d107      	bne.n	8002516 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800250e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f838 	bl	8002586 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b20      	cmp	r3, #32
 8002522:	d10e      	bne.n	8002542 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b20      	cmp	r3, #32
 8002530:	d107      	bne.n	8002542 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f06f 0220 	mvn.w	r2, #32
 800253a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f8c7 	bl	80026d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a40      	ldr	r2, [pc, #256]	; (80026b0 <TIM_Base_SetConfig+0x114>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d013      	beq.n	80025dc <TIM_Base_SetConfig+0x40>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ba:	d00f      	beq.n	80025dc <TIM_Base_SetConfig+0x40>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a3d      	ldr	r2, [pc, #244]	; (80026b4 <TIM_Base_SetConfig+0x118>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00b      	beq.n	80025dc <TIM_Base_SetConfig+0x40>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a3c      	ldr	r2, [pc, #240]	; (80026b8 <TIM_Base_SetConfig+0x11c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d007      	beq.n	80025dc <TIM_Base_SetConfig+0x40>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a3b      	ldr	r2, [pc, #236]	; (80026bc <TIM_Base_SetConfig+0x120>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d003      	beq.n	80025dc <TIM_Base_SetConfig+0x40>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a3a      	ldr	r2, [pc, #232]	; (80026c0 <TIM_Base_SetConfig+0x124>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d108      	bne.n	80025ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a2f      	ldr	r2, [pc, #188]	; (80026b0 <TIM_Base_SetConfig+0x114>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d01f      	beq.n	8002636 <TIM_Base_SetConfig+0x9a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fc:	d01b      	beq.n	8002636 <TIM_Base_SetConfig+0x9a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a2c      	ldr	r2, [pc, #176]	; (80026b4 <TIM_Base_SetConfig+0x118>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d017      	beq.n	8002636 <TIM_Base_SetConfig+0x9a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a2b      	ldr	r2, [pc, #172]	; (80026b8 <TIM_Base_SetConfig+0x11c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <TIM_Base_SetConfig+0x9a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a2a      	ldr	r2, [pc, #168]	; (80026bc <TIM_Base_SetConfig+0x120>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00f      	beq.n	8002636 <TIM_Base_SetConfig+0x9a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a29      	ldr	r2, [pc, #164]	; (80026c0 <TIM_Base_SetConfig+0x124>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00b      	beq.n	8002636 <TIM_Base_SetConfig+0x9a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a28      	ldr	r2, [pc, #160]	; (80026c4 <TIM_Base_SetConfig+0x128>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <TIM_Base_SetConfig+0x9a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a27      	ldr	r2, [pc, #156]	; (80026c8 <TIM_Base_SetConfig+0x12c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d003      	beq.n	8002636 <TIM_Base_SetConfig+0x9a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a26      	ldr	r2, [pc, #152]	; (80026cc <TIM_Base_SetConfig+0x130>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d108      	bne.n	8002648 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a10      	ldr	r2, [pc, #64]	; (80026b0 <TIM_Base_SetConfig+0x114>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d00f      	beq.n	8002694 <TIM_Base_SetConfig+0xf8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <TIM_Base_SetConfig+0x124>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d00b      	beq.n	8002694 <TIM_Base_SetConfig+0xf8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <TIM_Base_SetConfig+0x128>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d007      	beq.n	8002694 <TIM_Base_SetConfig+0xf8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a10      	ldr	r2, [pc, #64]	; (80026c8 <TIM_Base_SetConfig+0x12c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d003      	beq.n	8002694 <TIM_Base_SetConfig+0xf8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <TIM_Base_SetConfig+0x130>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d103      	bne.n	800269c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	615a      	str	r2, [r3, #20]
}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40010000 	.word	0x40010000
 80026b4:	40000400 	.word	0x40000400
 80026b8:	40000800 	.word	0x40000800
 80026bc:	40000c00 	.word	0x40000c00
 80026c0:	40010400 	.word	0x40010400
 80026c4:	40014000 	.word	0x40014000
 80026c8:	40014400 	.word	0x40014400
 80026cc:	40014800 	.word	0x40014800

080026d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <__NVIC_SetPriority>:
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	6039      	str	r1, [r7, #0]
 8002716:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800271c:	2b00      	cmp	r3, #0
 800271e:	db0a      	blt.n	8002736 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	490c      	ldr	r1, [pc, #48]	; (8002758 <__NVIC_SetPriority+0x4c>)
 8002726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800272a:	0112      	lsls	r2, r2, #4
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	440b      	add	r3, r1
 8002730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002734:	e00a      	b.n	800274c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4908      	ldr	r1, [pc, #32]	; (800275c <__NVIC_SetPriority+0x50>)
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	3b04      	subs	r3, #4
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	440b      	add	r3, r1
 800274a:	761a      	strb	r2, [r3, #24]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000e100 	.word	0xe000e100
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <SysTick_Handler+0x1c>)
 8002766:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002768:	f001 fd28 	bl	80041bc <xTaskGetSchedulerState>
 800276c:	4603      	mov	r3, r0
 800276e:	2b01      	cmp	r3, #1
 8002770:	d001      	beq.n	8002776 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002772:	f002 fb11 	bl	8004d98 <xPortSysTickHandler>
  }
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	e000e010 	.word	0xe000e010

08002780 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002784:	2100      	movs	r1, #0
 8002786:	f06f 0004 	mvn.w	r0, #4
 800278a:	f7ff ffbf 	bl	800270c <__NVIC_SetPriority>
#endif
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800279a:	f3ef 8305 	mrs	r3, IPSR
 800279e:	603b      	str	r3, [r7, #0]
  return(result);
 80027a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80027a6:	f06f 0305 	mvn.w	r3, #5
 80027aa:	607b      	str	r3, [r7, #4]
 80027ac:	e00c      	b.n	80027c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <osKernelInitialize+0x44>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d105      	bne.n	80027c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <osKernelInitialize+0x44>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80027bc:	2300      	movs	r3, #0
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	e002      	b.n	80027c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295
 80027c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80027c8:	687b      	ldr	r3, [r7, #4]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	24000094 	.word	0x24000094

080027dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027e2:	f3ef 8305 	mrs	r3, IPSR
 80027e6:	603b      	str	r3, [r7, #0]
  return(result);
 80027e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80027ee:	f06f 0305 	mvn.w	r3, #5
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	e010      	b.n	8002818 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <osKernelStart+0x48>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d109      	bne.n	8002812 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80027fe:	f7ff ffbf 	bl	8002780 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002802:	4b08      	ldr	r3, [pc, #32]	; (8002824 <osKernelStart+0x48>)
 8002804:	2202      	movs	r2, #2
 8002806:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002808:	f001 f87c 	bl	8003904 <vTaskStartScheduler>
      stat = osOK;
 800280c:	2300      	movs	r3, #0
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	e002      	b.n	8002818 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002818:	687b      	ldr	r3, [r7, #4]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	24000094 	.word	0x24000094

08002828 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b08e      	sub	sp, #56	; 0x38
 800282c:	af04      	add	r7, sp, #16
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002834:	2300      	movs	r3, #0
 8002836:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002838:	f3ef 8305 	mrs	r3, IPSR
 800283c:	617b      	str	r3, [r7, #20]
  return(result);
 800283e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002840:	2b00      	cmp	r3, #0
 8002842:	d17e      	bne.n	8002942 <osThreadNew+0x11a>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d07b      	beq.n	8002942 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800284e:	2318      	movs	r3, #24
 8002850:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002852:	2300      	movs	r3, #0
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002856:	f04f 33ff 	mov.w	r3, #4294967295
 800285a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d045      	beq.n	80028ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <osThreadNew+0x48>
        name = attr->name;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <osThreadNew+0x6e>
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b38      	cmp	r3, #56	; 0x38
 8002888:	d805      	bhi.n	8002896 <osThreadNew+0x6e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <osThreadNew+0x72>
        return (NULL);
 8002896:	2300      	movs	r3, #0
 8002898:	e054      	b.n	8002944 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	089b      	lsrs	r3, r3, #2
 80028a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00e      	beq.n	80028d0 <osThreadNew+0xa8>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2bbb      	cmp	r3, #187	; 0xbb
 80028b8:	d90a      	bls.n	80028d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d006      	beq.n	80028d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <osThreadNew+0xa8>
        mem = 1;
 80028ca:	2301      	movs	r3, #1
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	e010      	b.n	80028f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10c      	bne.n	80028f2 <osThreadNew+0xca>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d108      	bne.n	80028f2 <osThreadNew+0xca>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d104      	bne.n	80028f2 <osThreadNew+0xca>
          mem = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61bb      	str	r3, [r7, #24]
 80028ec:	e001      	b.n	80028f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d110      	bne.n	800291a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002900:	9202      	str	r2, [sp, #8]
 8002902:	9301      	str	r3, [sp, #4]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	6a3a      	ldr	r2, [r7, #32]
 800290c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 fe0c 	bl	800352c <xTaskCreateStatic>
 8002914:	4603      	mov	r3, r0
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	e013      	b.n	8002942 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d110      	bne.n	8002942 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	b29a      	uxth	r2, r3
 8002924:	f107 0310 	add.w	r3, r7, #16
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 fe57 	bl	80035e6 <xTaskCreate>
 8002938:	4603      	mov	r3, r0
 800293a:	2b01      	cmp	r3, #1
 800293c:	d001      	beq.n	8002942 <osThreadNew+0x11a>
            hTask = NULL;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002942:	693b      	ldr	r3, [r7, #16]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3728      	adds	r7, #40	; 0x28
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002954:	f3ef 8305 	mrs	r3, IPSR
 8002958:	60bb      	str	r3, [r7, #8]
  return(result);
 800295a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <osDelay+0x1c>
    stat = osErrorISR;
 8002960:	f06f 0305 	mvn.w	r3, #5
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	e007      	b.n	8002978 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 ff92 	bl	800389c <vTaskDelay>
    }
  }

  return (stat);
 8002978:	68fb      	ldr	r3, [r7, #12]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002994:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	4a06      	ldr	r2, [pc, #24]	; (80029b4 <vApplicationGetIdleTaskMemory+0x30>)
 800299a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2280      	movs	r2, #128	; 0x80
 80029a0:	601a      	str	r2, [r3, #0]
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	24000098 	.word	0x24000098
 80029b4:	24000154 	.word	0x24000154

080029b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80029c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	4a06      	ldr	r2, [pc, #24]	; (80029e8 <vApplicationGetTimerTaskMemory+0x30>)
 80029ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029d6:	601a      	str	r2, [r3, #0]
}
 80029d8:	bf00      	nop
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	24000354 	.word	0x24000354
 80029e8:	24000410 	.word	0x24000410

080029ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f103 0208 	add.w	r2, r3, #8
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295
 8002a04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f103 0208 	add.w	r2, r3, #8
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f103 0208 	add.w	r2, r3, #8
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	601a      	str	r2, [r3, #0]
}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b085      	sub	sp, #20
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa4:	d103      	bne.n	8002aae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	e00c      	b.n	8002ac8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3308      	adds	r3, #8
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	e002      	b.n	8002abc <vListInsert+0x2e>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d2f6      	bcs.n	8002ab6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	601a      	str	r2, [r3, #0]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6892      	ldr	r2, [r2, #8]
 8002b16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6852      	ldr	r2, [r2, #4]
 8002b20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d103      	bne.n	8002b34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	1e5a      	subs	r2, r3, #1
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b7a:	bf00      	nop
 8002b7c:	e7fe      	b.n	8002b7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b7e:	f002 f879 	bl	8004c74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8a:	68f9      	ldr	r1, [r7, #12]
 8002b8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	441a      	add	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	68f9      	ldr	r1, [r7, #12]
 8002bb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	441a      	add	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	22ff      	movs	r2, #255	; 0xff
 8002bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	22ff      	movs	r2, #255	; 0xff
 8002bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d114      	bne.n	8002bfe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01a      	beq.n	8002c12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	3310      	adds	r3, #16
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 f929 	bl	8003e38 <xTaskRemoveFromEventList>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d012      	beq.n	8002c12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002bec:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <xQueueGenericReset+0xcc>)
 8002bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	e009      	b.n	8002c12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3310      	adds	r3, #16
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fef2 	bl	80029ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	3324      	adds	r3, #36	; 0x24
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff feed 	bl	80029ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c12:	f002 f85f 	bl	8004cd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c16:	2301      	movs	r3, #1
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	e000ed04 	.word	0xe000ed04

08002c24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08e      	sub	sp, #56	; 0x38
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10a      	bne.n	8002c4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3c:	f383 8811 	msr	BASEPRI, r3
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c4a:	bf00      	nop
 8002c4c:	e7fe      	b.n	8002c4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10a      	bne.n	8002c6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c58:	f383 8811 	msr	BASEPRI, r3
 8002c5c:	f3bf 8f6f 	isb	sy
 8002c60:	f3bf 8f4f 	dsb	sy
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c66:	bf00      	nop
 8002c68:	e7fe      	b.n	8002c68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <xQueueGenericCreateStatic+0x52>
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <xQueueGenericCreateStatic+0x56>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <xQueueGenericCreateStatic+0x58>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10a      	bne.n	8002c96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	623b      	str	r3, [r7, #32]
}
 8002c92:	bf00      	nop
 8002c94:	e7fe      	b.n	8002c94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <xQueueGenericCreateStatic+0x7e>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <xQueueGenericCreateStatic+0x82>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <xQueueGenericCreateStatic+0x84>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	61fb      	str	r3, [r7, #28]
}
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002cc2:	2350      	movs	r3, #80	; 0x50
 8002cc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2b50      	cmp	r3, #80	; 0x50
 8002cca:	d00a      	beq.n	8002ce2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	61bb      	str	r3, [r7, #24]
}
 8002cde:	bf00      	nop
 8002ce0:	e7fe      	b.n	8002ce0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ce2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00d      	beq.n	8002d0a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cf6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 f805 	bl	8002d14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3730      	adds	r7, #48	; 0x30
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d103      	bne.n	8002d30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	e002      	b.n	8002d36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d42:	2101      	movs	r1, #1
 8002d44:	69b8      	ldr	r0, [r7, #24]
 8002d46:	f7ff ff05 	bl	8002b54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	78fa      	ldrb	r2, [r7, #3]
 8002d4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08e      	sub	sp, #56	; 0x38
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10a      	bne.n	8002d8e <xQueueGenericSend+0x32>
	__asm volatile
 8002d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7c:	f383 8811 	msr	BASEPRI, r3
 8002d80:	f3bf 8f6f 	isb	sy
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d8a:	bf00      	nop
 8002d8c:	e7fe      	b.n	8002d8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d103      	bne.n	8002d9c <xQueueGenericSend+0x40>
 8002d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <xQueueGenericSend+0x44>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <xQueueGenericSend+0x46>
 8002da0:	2300      	movs	r3, #0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10a      	bne.n	8002dbc <xQueueGenericSend+0x60>
	__asm volatile
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002db8:	bf00      	nop
 8002dba:	e7fe      	b.n	8002dba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d103      	bne.n	8002dca <xQueueGenericSend+0x6e>
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <xQueueGenericSend+0x72>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <xQueueGenericSend+0x74>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10a      	bne.n	8002dea <xQueueGenericSend+0x8e>
	__asm volatile
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	623b      	str	r3, [r7, #32]
}
 8002de6:	bf00      	nop
 8002de8:	e7fe      	b.n	8002de8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dea:	f001 f9e7 	bl	80041bc <xTaskGetSchedulerState>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <xQueueGenericSend+0x9e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <xQueueGenericSend+0xa2>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <xQueueGenericSend+0xa4>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10a      	bne.n	8002e1a <xQueueGenericSend+0xbe>
	__asm volatile
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	61fb      	str	r3, [r7, #28]
}
 8002e16:	bf00      	nop
 8002e18:	e7fe      	b.n	8002e18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e1a:	f001 ff2b 	bl	8004c74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d302      	bcc.n	8002e30 <xQueueGenericSend+0xd4>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d129      	bne.n	8002e84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e36:	f000 fa0b 	bl	8003250 <prvCopyDataToQueue>
 8002e3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d010      	beq.n	8002e66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	3324      	adds	r3, #36	; 0x24
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fff5 	bl	8003e38 <xTaskRemoveFromEventList>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d013      	beq.n	8002e7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e54:	4b3f      	ldr	r3, [pc, #252]	; (8002f54 <xQueueGenericSend+0x1f8>)
 8002e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	e00a      	b.n	8002e7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d007      	beq.n	8002e7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e6c:	4b39      	ldr	r3, [pc, #228]	; (8002f54 <xQueueGenericSend+0x1f8>)
 8002e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e7c:	f001 ff2a 	bl	8004cd4 <vPortExitCritical>
				return pdPASS;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e063      	b.n	8002f4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d103      	bne.n	8002e92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e8a:	f001 ff23 	bl	8004cd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e05c      	b.n	8002f4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d106      	bne.n	8002ea6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f001 f82f 	bl	8003f00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ea6:	f001 ff15 	bl	8004cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002eaa:	f000 fd9b 	bl	80039e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002eae:	f001 fee1 	bl	8004c74 <vPortEnterCritical>
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eb8:	b25b      	sxtb	r3, r3
 8002eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebe:	d103      	bne.n	8002ec8 <xQueueGenericSend+0x16c>
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ece:	b25b      	sxtb	r3, r3
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d103      	bne.n	8002ede <xQueueGenericSend+0x182>
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ede:	f001 fef9 	bl	8004cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ee2:	1d3a      	adds	r2, r7, #4
 8002ee4:	f107 0314 	add.w	r3, r7, #20
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f001 f81e 	bl	8003f2c <xTaskCheckForTimeOut>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d124      	bne.n	8002f40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ef8:	f000 faa2 	bl	8003440 <prvIsQueueFull>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d018      	beq.n	8002f34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f04:	3310      	adds	r3, #16
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4611      	mov	r1, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 ff44 	bl	8003d98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f12:	f000 fa2d 	bl	8003370 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f16:	f000 fd73 	bl	8003a00 <xTaskResumeAll>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f47f af7c 	bne.w	8002e1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002f22:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <xQueueGenericSend+0x1f8>)
 8002f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	e772      	b.n	8002e1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f36:	f000 fa1b 	bl	8003370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f3a:	f000 fd61 	bl	8003a00 <xTaskResumeAll>
 8002f3e:	e76c      	b.n	8002e1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f42:	f000 fa15 	bl	8003370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f46:	f000 fd5b 	bl	8003a00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3738      	adds	r7, #56	; 0x38
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	e000ed04 	.word	0xe000ed04

08002f58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b090      	sub	sp, #64	; 0x40
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f82:	bf00      	nop
 8002f84:	e7fe      	b.n	8002f84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d103      	bne.n	8002f94 <xQueueGenericSendFromISR+0x3c>
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <xQueueGenericSendFromISR+0x40>
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <xQueueGenericSendFromISR+0x42>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10a      	bne.n	8002fb4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002fb0:	bf00      	nop
 8002fb2:	e7fe      	b.n	8002fb2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d103      	bne.n	8002fc2 <xQueueGenericSendFromISR+0x6a>
 8002fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <xQueueGenericSendFromISR+0x6e>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <xQueueGenericSendFromISR+0x70>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10a      	bne.n	8002fe2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd0:	f383 8811 	msr	BASEPRI, r3
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	623b      	str	r3, [r7, #32]
}
 8002fde:	bf00      	nop
 8002fe0:	e7fe      	b.n	8002fe0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fe2:	f001 ff29 	bl	8004e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fe6:	f3ef 8211 	mrs	r2, BASEPRI
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	61fa      	str	r2, [r7, #28]
 8002ffc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003000:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300a:	429a      	cmp	r2, r3
 800300c:	d302      	bcc.n	8003014 <xQueueGenericSendFromISR+0xbc>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d12f      	bne.n	8003074 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003016:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800301a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800302a:	f000 f911 	bl	8003250 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800302e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d112      	bne.n	800305e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	2b00      	cmp	r3, #0
 800303e:	d016      	beq.n	800306e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003042:	3324      	adds	r3, #36	; 0x24
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fef7 	bl	8003e38 <xTaskRemoveFromEventList>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00e      	beq.n	800306e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	e007      	b.n	800306e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800305e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003062:	3301      	adds	r3, #1
 8003064:	b2db      	uxtb	r3, r3
 8003066:	b25a      	sxtb	r2, r3
 8003068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800306e:	2301      	movs	r3, #1
 8003070:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003072:	e001      	b.n	8003078 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003074:	2300      	movs	r3, #0
 8003076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003082:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003086:	4618      	mov	r0, r3
 8003088:	3740      	adds	r7, #64	; 0x40
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08c      	sub	sp, #48	; 0x30
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800309c:	2300      	movs	r3, #0
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10a      	bne.n	80030c0 <xQueueReceive+0x30>
	__asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	623b      	str	r3, [r7, #32]
}
 80030bc:	bf00      	nop
 80030be:	e7fe      	b.n	80030be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <xQueueReceive+0x3e>
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <xQueueReceive+0x42>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <xQueueReceive+0x44>
 80030d2:	2300      	movs	r3, #0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10a      	bne.n	80030ee <xQueueReceive+0x5e>
	__asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	61fb      	str	r3, [r7, #28]
}
 80030ea:	bf00      	nop
 80030ec:	e7fe      	b.n	80030ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030ee:	f001 f865 	bl	80041bc <xTaskGetSchedulerState>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d102      	bne.n	80030fe <xQueueReceive+0x6e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <xQueueReceive+0x72>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <xQueueReceive+0x74>
 8003102:	2300      	movs	r3, #0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10a      	bne.n	800311e <xQueueReceive+0x8e>
	__asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	61bb      	str	r3, [r7, #24]
}
 800311a:	bf00      	nop
 800311c:	e7fe      	b.n	800311c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800311e:	f001 fda9 	bl	8004c74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01f      	beq.n	800316e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003132:	f000 f8f7 	bl	8003324 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	1e5a      	subs	r2, r3, #1
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00f      	beq.n	8003166 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	3310      	adds	r3, #16
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fe74 	bl	8003e38 <xTaskRemoveFromEventList>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003156:	4b3d      	ldr	r3, [pc, #244]	; (800324c <xQueueReceive+0x1bc>)
 8003158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003166:	f001 fdb5 	bl	8004cd4 <vPortExitCritical>
				return pdPASS;
 800316a:	2301      	movs	r3, #1
 800316c:	e069      	b.n	8003242 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d103      	bne.n	800317c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003174:	f001 fdae 	bl	8004cd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003178:	2300      	movs	r3, #0
 800317a:	e062      	b.n	8003242 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003182:	f107 0310 	add.w	r3, r7, #16
 8003186:	4618      	mov	r0, r3
 8003188:	f000 feba 	bl	8003f00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800318c:	2301      	movs	r3, #1
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003190:	f001 fda0 	bl	8004cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003194:	f000 fc26 	bl	80039e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003198:	f001 fd6c 	bl	8004c74 <vPortEnterCritical>
 800319c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031a2:	b25b      	sxtb	r3, r3
 80031a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a8:	d103      	bne.n	80031b2 <xQueueReceive+0x122>
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031b8:	b25b      	sxtb	r3, r3
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d103      	bne.n	80031c8 <xQueueReceive+0x138>
 80031c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031c8:	f001 fd84 	bl	8004cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031cc:	1d3a      	adds	r2, r7, #4
 80031ce:	f107 0310 	add.w	r3, r7, #16
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fea9 	bl	8003f2c <xTaskCheckForTimeOut>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d123      	bne.n	8003228 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031e2:	f000 f917 	bl	8003414 <prvIsQueueEmpty>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d017      	beq.n	800321c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ee:	3324      	adds	r3, #36	; 0x24
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	4611      	mov	r1, r2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fdcf 	bl	8003d98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031fc:	f000 f8b8 	bl	8003370 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003200:	f000 fbfe 	bl	8003a00 <xTaskResumeAll>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d189      	bne.n	800311e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <xQueueReceive+0x1bc>)
 800320c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	e780      	b.n	800311e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800321c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800321e:	f000 f8a7 	bl	8003370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003222:	f000 fbed 	bl	8003a00 <xTaskResumeAll>
 8003226:	e77a      	b.n	800311e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800322a:	f000 f8a1 	bl	8003370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800322e:	f000 fbe7 	bl	8003a00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003234:	f000 f8ee 	bl	8003414 <prvIsQueueEmpty>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	f43f af6f 	beq.w	800311e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003240:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003242:	4618      	mov	r0, r3
 8003244:	3730      	adds	r7, #48	; 0x30
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	e000ed04 	.word	0xe000ed04

08003250 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003264:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10d      	bne.n	800328a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d14d      	bne.n	8003312 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	4618      	mov	r0, r3
 800327c:	f000 ffbc 	bl	80041f8 <xTaskPriorityDisinherit>
 8003280:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	e043      	b.n	8003312 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d119      	bne.n	80032c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6858      	ldr	r0, [r3, #4]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	461a      	mov	r2, r3
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	f002 f81c 	bl	80052d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	441a      	add	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d32b      	bcc.n	8003312 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	e026      	b.n	8003312 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	68d8      	ldr	r0, [r3, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	461a      	mov	r2, r3
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	f002 f802 	bl	80052d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	425b      	negs	r3, r3
 80032de:	441a      	add	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d207      	bcs.n	8003300 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	425b      	negs	r3, r3
 80032fa:	441a      	add	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d105      	bne.n	8003312 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	3b01      	subs	r3, #1
 8003310:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800331a:	697b      	ldr	r3, [r7, #20]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	d018      	beq.n	8003368 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	441a      	add	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	429a      	cmp	r2, r3
 800334e:	d303      	bcc.n	8003358 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68d9      	ldr	r1, [r3, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	461a      	mov	r2, r3
 8003362:	6838      	ldr	r0, [r7, #0]
 8003364:	f001 ffb8 	bl	80052d8 <memcpy>
	}
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003378:	f001 fc7c 	bl	8004c74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003382:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003384:	e011      	b.n	80033aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	2b00      	cmp	r3, #0
 800338c:	d012      	beq.n	80033b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3324      	adds	r3, #36	; 0x24
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fd50 	bl	8003e38 <xTaskRemoveFromEventList>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800339e:	f000 fe27 	bl	8003ff0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	dce9      	bgt.n	8003386 <prvUnlockQueue+0x16>
 80033b2:	e000      	b.n	80033b6 <prvUnlockQueue+0x46>
					break;
 80033b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	22ff      	movs	r2, #255	; 0xff
 80033ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80033be:	f001 fc89 	bl	8004cd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033c2:	f001 fc57 	bl	8004c74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033ce:	e011      	b.n	80033f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d012      	beq.n	80033fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3310      	adds	r3, #16
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fd2b 	bl	8003e38 <xTaskRemoveFromEventList>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033e8:	f000 fe02 	bl	8003ff0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033ec:	7bbb      	ldrb	r3, [r7, #14]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	dce9      	bgt.n	80033d0 <prvUnlockQueue+0x60>
 80033fc:	e000      	b.n	8003400 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	22ff      	movs	r2, #255	; 0xff
 8003404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003408:	f001 fc64 	bl	8004cd4 <vPortExitCritical>
}
 800340c:	bf00      	nop
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800341c:	f001 fc2a 	bl	8004c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	2b00      	cmp	r3, #0
 8003426:	d102      	bne.n	800342e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003428:	2301      	movs	r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e001      	b.n	8003432 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003432:	f001 fc4f 	bl	8004cd4 <vPortExitCritical>

	return xReturn;
 8003436:	68fb      	ldr	r3, [r7, #12]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003448:	f001 fc14 	bl	8004c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003454:	429a      	cmp	r2, r3
 8003456:	d102      	bne.n	800345e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003458:	2301      	movs	r3, #1
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	e001      	b.n	8003462 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003462:	f001 fc37 	bl	8004cd4 <vPortExitCritical>

	return xReturn;
 8003466:	68fb      	ldr	r3, [r7, #12]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	e014      	b.n	80034aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003480:	4a0f      	ldr	r2, [pc, #60]	; (80034c0 <vQueueAddToRegistry+0x50>)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10b      	bne.n	80034a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800348c:	490c      	ldr	r1, [pc, #48]	; (80034c0 <vQueueAddToRegistry+0x50>)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003496:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <vQueueAddToRegistry+0x50>)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80034a2:	e006      	b.n	80034b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3301      	adds	r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b07      	cmp	r3, #7
 80034ae:	d9e7      	bls.n	8003480 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	24004abc 	.word	0x24004abc

080034c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80034d4:	f001 fbce 	bl	8004c74 <vPortEnterCritical>
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034de:	b25b      	sxtb	r3, r3
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d103      	bne.n	80034ee <vQueueWaitForMessageRestricted+0x2a>
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034f4:	b25b      	sxtb	r3, r3
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fa:	d103      	bne.n	8003504 <vQueueWaitForMessageRestricted+0x40>
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003504:	f001 fbe6 	bl	8004cd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	2b00      	cmp	r3, #0
 800350e:	d106      	bne.n	800351e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	3324      	adds	r3, #36	; 0x24
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	68b9      	ldr	r1, [r7, #8]
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fc61 	bl	8003de0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800351e:	6978      	ldr	r0, [r7, #20]
 8003520:	f7ff ff26 	bl	8003370 <prvUnlockQueue>
	}
 8003524:	bf00      	nop
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08e      	sub	sp, #56	; 0x38
 8003530:	af04      	add	r7, sp, #16
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800353a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	623b      	str	r3, [r7, #32]
}
 8003552:	bf00      	nop
 8003554:	e7fe      	b.n	8003554 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10a      	bne.n	8003572 <xTaskCreateStatic+0x46>
	__asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	61fb      	str	r3, [r7, #28]
}
 800356e:	bf00      	nop
 8003570:	e7fe      	b.n	8003570 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003572:	23bc      	movs	r3, #188	; 0xbc
 8003574:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	2bbc      	cmp	r3, #188	; 0xbc
 800357a:	d00a      	beq.n	8003592 <xTaskCreateStatic+0x66>
	__asm volatile
 800357c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003580:	f383 8811 	msr	BASEPRI, r3
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	61bb      	str	r3, [r7, #24]
}
 800358e:	bf00      	nop
 8003590:	e7fe      	b.n	8003590 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003592:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003596:	2b00      	cmp	r3, #0
 8003598:	d01e      	beq.n	80035d8 <xTaskCreateStatic+0xac>
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01b      	beq.n	80035d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	2202      	movs	r2, #2
 80035ae:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035b2:	2300      	movs	r3, #0
 80035b4:	9303      	str	r3, [sp, #12]
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	9302      	str	r3, [sp, #8]
 80035ba:	f107 0314 	add.w	r3, r7, #20
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f850 	bl	8003670 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035d2:	f000 f8f3 	bl	80037bc <prvAddNewTaskToReadyList>
 80035d6:	e001      	b.n	80035dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035dc:	697b      	ldr	r3, [r7, #20]
	}
 80035de:	4618      	mov	r0, r3
 80035e0:	3728      	adds	r7, #40	; 0x28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b08c      	sub	sp, #48	; 0x30
 80035ea:	af04      	add	r7, sp, #16
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	603b      	str	r3, [r7, #0]
 80035f2:	4613      	mov	r3, r2
 80035f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f001 fc5c 	bl	8004eb8 <pvPortMalloc>
 8003600:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00e      	beq.n	8003626 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003608:	20bc      	movs	r0, #188	; 0xbc
 800360a:	f001 fc55 	bl	8004eb8 <pvPortMalloc>
 800360e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	631a      	str	r2, [r3, #48]	; 0x30
 800361c:	e005      	b.n	800362a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800361e:	6978      	ldr	r0, [r7, #20]
 8003620:	f001 fd16 	bl	8005050 <vPortFree>
 8003624:	e001      	b.n	800362a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d017      	beq.n	8003660 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003638:	88fa      	ldrh	r2, [r7, #6]
 800363a:	2300      	movs	r3, #0
 800363c:	9303      	str	r3, [sp, #12]
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	9302      	str	r3, [sp, #8]
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68b9      	ldr	r1, [r7, #8]
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f80e 	bl	8003670 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003654:	69f8      	ldr	r0, [r7, #28]
 8003656:	f000 f8b1 	bl	80037bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800365a:	2301      	movs	r3, #1
 800365c:	61bb      	str	r3, [r7, #24]
 800365e:	e002      	b.n	8003666 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003660:	f04f 33ff 	mov.w	r3, #4294967295
 8003664:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003666:	69bb      	ldr	r3, [r7, #24]
	}
 8003668:	4618      	mov	r0, r3
 800366a:	3720      	adds	r7, #32
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	461a      	mov	r2, r3
 8003688:	21a5      	movs	r1, #165	; 0xa5
 800368a:	f001 fe33 	bl	80052f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003698:	440b      	add	r3, r1
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	f023 0307 	bic.w	r3, r3, #7
 80036a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80036b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	617b      	str	r3, [r7, #20]
}
 80036c4:	bf00      	nop
 80036c6:	e7fe      	b.n	80036c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01f      	beq.n	800370e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	e012      	b.n	80036fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	4413      	add	r3, r2
 80036da:	7819      	ldrb	r1, [r3, #0]
 80036dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	3334      	adds	r3, #52	; 0x34
 80036e4:	460a      	mov	r2, r1
 80036e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	4413      	add	r3, r2
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d006      	beq.n	8003702 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	3301      	adds	r3, #1
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	2b0f      	cmp	r3, #15
 80036fe:	d9e9      	bls.n	80036d4 <prvInitialiseNewTask+0x64>
 8003700:	e000      	b.n	8003704 <prvInitialiseNewTask+0x94>
			{
				break;
 8003702:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800370c:	e003      	b.n	8003716 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003718:	2b37      	cmp	r3, #55	; 0x37
 800371a:	d901      	bls.n	8003720 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800371c:	2337      	movs	r3, #55	; 0x37
 800371e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003724:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800372a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	2200      	movs	r2, #0
 8003730:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003734:	3304      	adds	r3, #4
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff f978 	bl	8002a2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	3318      	adds	r3, #24
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff f973 	bl	8002a2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800374a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800375a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	2200      	movs	r2, #0
 8003760:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	2200      	movs	r2, #0
 8003768:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376e:	3354      	adds	r3, #84	; 0x54
 8003770:	2260      	movs	r2, #96	; 0x60
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f001 fdbd 	bl	80052f4 <memset>
 800377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377c:	4a0c      	ldr	r2, [pc, #48]	; (80037b0 <prvInitialiseNewTask+0x140>)
 800377e:	659a      	str	r2, [r3, #88]	; 0x58
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	4a0c      	ldr	r2, [pc, #48]	; (80037b4 <prvInitialiseNewTask+0x144>)
 8003784:	65da      	str	r2, [r3, #92]	; 0x5c
 8003786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003788:	4a0b      	ldr	r2, [pc, #44]	; (80037b8 <prvInitialiseNewTask+0x148>)
 800378a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	68f9      	ldr	r1, [r7, #12]
 8003790:	69b8      	ldr	r0, [r7, #24]
 8003792:	f001 f941 	bl	8004a18 <pxPortInitialiseStack>
 8003796:	4602      	mov	r2, r0
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037a8:	bf00      	nop
 80037aa:	3720      	adds	r7, #32
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	0800551c 	.word	0x0800551c
 80037b4:	0800553c 	.word	0x0800553c
 80037b8:	080054fc 	.word	0x080054fc

080037bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037c4:	f001 fa56 	bl	8004c74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037c8:	4b2d      	ldr	r3, [pc, #180]	; (8003880 <prvAddNewTaskToReadyList+0xc4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3301      	adds	r3, #1
 80037ce:	4a2c      	ldr	r2, [pc, #176]	; (8003880 <prvAddNewTaskToReadyList+0xc4>)
 80037d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037d2:	4b2c      	ldr	r3, [pc, #176]	; (8003884 <prvAddNewTaskToReadyList+0xc8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037da:	4a2a      	ldr	r2, [pc, #168]	; (8003884 <prvAddNewTaskToReadyList+0xc8>)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037e0:	4b27      	ldr	r3, [pc, #156]	; (8003880 <prvAddNewTaskToReadyList+0xc4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d110      	bne.n	800380a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037e8:	f000 fc26 	bl	8004038 <prvInitialiseTaskLists>
 80037ec:	e00d      	b.n	800380a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037ee:	4b26      	ldr	r3, [pc, #152]	; (8003888 <prvAddNewTaskToReadyList+0xcc>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037f6:	4b23      	ldr	r3, [pc, #140]	; (8003884 <prvAddNewTaskToReadyList+0xc8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	429a      	cmp	r2, r3
 8003802:	d802      	bhi.n	800380a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003804:	4a1f      	ldr	r2, [pc, #124]	; (8003884 <prvAddNewTaskToReadyList+0xc8>)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800380a:	4b20      	ldr	r3, [pc, #128]	; (800388c <prvAddNewTaskToReadyList+0xd0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3301      	adds	r3, #1
 8003810:	4a1e      	ldr	r2, [pc, #120]	; (800388c <prvAddNewTaskToReadyList+0xd0>)
 8003812:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003814:	4b1d      	ldr	r3, [pc, #116]	; (800388c <prvAddNewTaskToReadyList+0xd0>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003820:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <prvAddNewTaskToReadyList+0xd4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d903      	bls.n	8003830 <prvAddNewTaskToReadyList+0x74>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	4a18      	ldr	r2, [pc, #96]	; (8003890 <prvAddNewTaskToReadyList+0xd4>)
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4a15      	ldr	r2, [pc, #84]	; (8003894 <prvAddNewTaskToReadyList+0xd8>)
 800383e:	441a      	add	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f7ff f8fd 	bl	8002a46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800384c:	f001 fa42 	bl	8004cd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003850:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <prvAddNewTaskToReadyList+0xcc>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00e      	beq.n	8003876 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <prvAddNewTaskToReadyList+0xc8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	429a      	cmp	r2, r3
 8003864:	d207      	bcs.n	8003876 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003866:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <prvAddNewTaskToReadyList+0xdc>)
 8003868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	24000ce4 	.word	0x24000ce4
 8003884:	24000810 	.word	0x24000810
 8003888:	24000cf0 	.word	0x24000cf0
 800388c:	24000d00 	.word	0x24000d00
 8003890:	24000cec 	.word	0x24000cec
 8003894:	24000814 	.word	0x24000814
 8003898:	e000ed04 	.word	0xe000ed04

0800389c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d017      	beq.n	80038de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038ae:	4b13      	ldr	r3, [pc, #76]	; (80038fc <vTaskDelay+0x60>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <vTaskDelay+0x30>
	__asm volatile
 80038b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ba:	f383 8811 	msr	BASEPRI, r3
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	60bb      	str	r3, [r7, #8]
}
 80038c8:	bf00      	nop
 80038ca:	e7fe      	b.n	80038ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80038cc:	f000 f88a 	bl	80039e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038d0:	2100      	movs	r1, #0
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fcfe 	bl	80042d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038d8:	f000 f892 	bl	8003a00 <xTaskResumeAll>
 80038dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d107      	bne.n	80038f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80038e4:	4b06      	ldr	r3, [pc, #24]	; (8003900 <vTaskDelay+0x64>)
 80038e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038f4:	bf00      	nop
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	24000d0c 	.word	0x24000d0c
 8003900:	e000ed04 	.word	0xe000ed04

08003904 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800390e:	2300      	movs	r3, #0
 8003910:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003912:	463a      	mov	r2, r7
 8003914:	1d39      	adds	r1, r7, #4
 8003916:	f107 0308 	add.w	r3, r7, #8
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff f832 	bl	8002984 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003920:	6839      	ldr	r1, [r7, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	9202      	str	r2, [sp, #8]
 8003928:	9301      	str	r3, [sp, #4]
 800392a:	2300      	movs	r3, #0
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	2300      	movs	r3, #0
 8003930:	460a      	mov	r2, r1
 8003932:	4924      	ldr	r1, [pc, #144]	; (80039c4 <vTaskStartScheduler+0xc0>)
 8003934:	4824      	ldr	r0, [pc, #144]	; (80039c8 <vTaskStartScheduler+0xc4>)
 8003936:	f7ff fdf9 	bl	800352c <xTaskCreateStatic>
 800393a:	4603      	mov	r3, r0
 800393c:	4a23      	ldr	r2, [pc, #140]	; (80039cc <vTaskStartScheduler+0xc8>)
 800393e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003940:	4b22      	ldr	r3, [pc, #136]	; (80039cc <vTaskStartScheduler+0xc8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003948:	2301      	movs	r3, #1
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	e001      	b.n	8003952 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d102      	bne.n	800395e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003958:	f000 fd10 	bl	800437c <xTimerCreateTimerTask>
 800395c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d11b      	bne.n	800399c <vTaskStartScheduler+0x98>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	613b      	str	r3, [r7, #16]
}
 8003976:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003978:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <vTaskStartScheduler+0xcc>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3354      	adds	r3, #84	; 0x54
 800397e:	4a15      	ldr	r2, [pc, #84]	; (80039d4 <vTaskStartScheduler+0xd0>)
 8003980:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <vTaskStartScheduler+0xd4>)
 8003984:	f04f 32ff 	mov.w	r2, #4294967295
 8003988:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800398a:	4b14      	ldr	r3, [pc, #80]	; (80039dc <vTaskStartScheduler+0xd8>)
 800398c:	2201      	movs	r2, #1
 800398e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003990:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <vTaskStartScheduler+0xdc>)
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003996:	f001 f8cb 	bl	8004b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800399a:	e00e      	b.n	80039ba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a2:	d10a      	bne.n	80039ba <vTaskStartScheduler+0xb6>
	__asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	60fb      	str	r3, [r7, #12]
}
 80039b6:	bf00      	nop
 80039b8:	e7fe      	b.n	80039b8 <vTaskStartScheduler+0xb4>
}
 80039ba:	bf00      	nop
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	080054b0 	.word	0x080054b0
 80039c8:	08004009 	.word	0x08004009
 80039cc:	24000d08 	.word	0x24000d08
 80039d0:	24000810 	.word	0x24000810
 80039d4:	24000014 	.word	0x24000014
 80039d8:	24000d04 	.word	0x24000d04
 80039dc:	24000cf0 	.word	0x24000cf0
 80039e0:	24000ce8 	.word	0x24000ce8

080039e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80039e8:	4b04      	ldr	r3, [pc, #16]	; (80039fc <vTaskSuspendAll+0x18>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3301      	adds	r3, #1
 80039ee:	4a03      	ldr	r2, [pc, #12]	; (80039fc <vTaskSuspendAll+0x18>)
 80039f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80039f2:	bf00      	nop
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	24000d0c 	.word	0x24000d0c

08003a00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a0e:	4b42      	ldr	r3, [pc, #264]	; (8003b18 <xTaskResumeAll+0x118>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10a      	bne.n	8003a2c <xTaskResumeAll+0x2c>
	__asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	603b      	str	r3, [r7, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	e7fe      	b.n	8003a2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a2c:	f001 f922 	bl	8004c74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a30:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <xTaskResumeAll+0x118>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3b01      	subs	r3, #1
 8003a36:	4a38      	ldr	r2, [pc, #224]	; (8003b18 <xTaskResumeAll+0x118>)
 8003a38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a3a:	4b37      	ldr	r3, [pc, #220]	; (8003b18 <xTaskResumeAll+0x118>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d162      	bne.n	8003b08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a42:	4b36      	ldr	r3, [pc, #216]	; (8003b1c <xTaskResumeAll+0x11c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d05e      	beq.n	8003b08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a4a:	e02f      	b.n	8003aac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a4c:	4b34      	ldr	r3, [pc, #208]	; (8003b20 <xTaskResumeAll+0x120>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	3318      	adds	r3, #24
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff f851 	bl	8002b00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3304      	adds	r3, #4
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff f84c 	bl	8002b00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6c:	4b2d      	ldr	r3, [pc, #180]	; (8003b24 <xTaskResumeAll+0x124>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d903      	bls.n	8003a7c <xTaskResumeAll+0x7c>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	4a2a      	ldr	r2, [pc, #168]	; (8003b24 <xTaskResumeAll+0x124>)
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4a27      	ldr	r2, [pc, #156]	; (8003b28 <xTaskResumeAll+0x128>)
 8003a8a:	441a      	add	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4619      	mov	r1, r3
 8003a92:	4610      	mov	r0, r2
 8003a94:	f7fe ffd7 	bl	8002a46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9c:	4b23      	ldr	r3, [pc, #140]	; (8003b2c <xTaskResumeAll+0x12c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d302      	bcc.n	8003aac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003aa6:	4b22      	ldr	r3, [pc, #136]	; (8003b30 <xTaskResumeAll+0x130>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003aac:	4b1c      	ldr	r3, [pc, #112]	; (8003b20 <xTaskResumeAll+0x120>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1cb      	bne.n	8003a4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003aba:	f000 fb5f 	bl	800417c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003abe:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <xTaskResumeAll+0x134>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d010      	beq.n	8003aec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003aca:	f000 f847 	bl	8003b5c <xTaskIncrementTick>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ad4:	4b16      	ldr	r3, [pc, #88]	; (8003b30 <xTaskResumeAll+0x130>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f1      	bne.n	8003aca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003ae6:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <xTaskResumeAll+0x134>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003aec:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <xTaskResumeAll+0x130>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d009      	beq.n	8003b08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003af8:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <xTaskResumeAll+0x138>)
 8003afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b08:	f001 f8e4 	bl	8004cd4 <vPortExitCritical>

	return xAlreadyYielded;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	24000d0c 	.word	0x24000d0c
 8003b1c:	24000ce4 	.word	0x24000ce4
 8003b20:	24000ca4 	.word	0x24000ca4
 8003b24:	24000cec 	.word	0x24000cec
 8003b28:	24000814 	.word	0x24000814
 8003b2c:	24000810 	.word	0x24000810
 8003b30:	24000cf8 	.word	0x24000cf8
 8003b34:	24000cf4 	.word	0x24000cf4
 8003b38:	e000ed04 	.word	0xe000ed04

08003b3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b42:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <xTaskGetTickCount+0x1c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b48:	687b      	ldr	r3, [r7, #4]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	24000ce8 	.word	0x24000ce8

08003b5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b66:	4b4f      	ldr	r3, [pc, #316]	; (8003ca4 <xTaskIncrementTick+0x148>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f040 808f 	bne.w	8003c8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b70:	4b4d      	ldr	r3, [pc, #308]	; (8003ca8 <xTaskIncrementTick+0x14c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b78:	4a4b      	ldr	r2, [pc, #300]	; (8003ca8 <xTaskIncrementTick+0x14c>)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d120      	bne.n	8003bc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b84:	4b49      	ldr	r3, [pc, #292]	; (8003cac <xTaskIncrementTick+0x150>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	603b      	str	r3, [r7, #0]
}
 8003ba0:	bf00      	nop
 8003ba2:	e7fe      	b.n	8003ba2 <xTaskIncrementTick+0x46>
 8003ba4:	4b41      	ldr	r3, [pc, #260]	; (8003cac <xTaskIncrementTick+0x150>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <xTaskIncrementTick+0x154>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a3f      	ldr	r2, [pc, #252]	; (8003cac <xTaskIncrementTick+0x150>)
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	4a3f      	ldr	r2, [pc, #252]	; (8003cb0 <xTaskIncrementTick+0x154>)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	4b3e      	ldr	r3, [pc, #248]	; (8003cb4 <xTaskIncrementTick+0x158>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	4a3d      	ldr	r2, [pc, #244]	; (8003cb4 <xTaskIncrementTick+0x158>)
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	f000 fadb 	bl	800417c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bc6:	4b3c      	ldr	r3, [pc, #240]	; (8003cb8 <xTaskIncrementTick+0x15c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d349      	bcc.n	8003c64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bd0:	4b36      	ldr	r3, [pc, #216]	; (8003cac <xTaskIncrementTick+0x150>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d104      	bne.n	8003be4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bda:	4b37      	ldr	r3, [pc, #220]	; (8003cb8 <xTaskIncrementTick+0x15c>)
 8003bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003be0:	601a      	str	r2, [r3, #0]
					break;
 8003be2:	e03f      	b.n	8003c64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003be4:	4b31      	ldr	r3, [pc, #196]	; (8003cac <xTaskIncrementTick+0x150>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d203      	bcs.n	8003c04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003bfc:	4a2e      	ldr	r2, [pc, #184]	; (8003cb8 <xTaskIncrementTick+0x15c>)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c02:	e02f      	b.n	8003c64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	3304      	adds	r3, #4
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fe ff79 	bl	8002b00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d004      	beq.n	8003c20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	3318      	adds	r3, #24
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fe ff70 	bl	8002b00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c24:	4b25      	ldr	r3, [pc, #148]	; (8003cbc <xTaskIncrementTick+0x160>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d903      	bls.n	8003c34 <xTaskIncrementTick+0xd8>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	4a22      	ldr	r2, [pc, #136]	; (8003cbc <xTaskIncrementTick+0x160>)
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4a1f      	ldr	r2, [pc, #124]	; (8003cc0 <xTaskIncrementTick+0x164>)
 8003c42:	441a      	add	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	3304      	adds	r3, #4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	f7fe fefb 	bl	8002a46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c54:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <xTaskIncrementTick+0x168>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d3b8      	bcc.n	8003bd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c62:	e7b5      	b.n	8003bd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c64:	4b17      	ldr	r3, [pc, #92]	; (8003cc4 <xTaskIncrementTick+0x168>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6a:	4915      	ldr	r1, [pc, #84]	; (8003cc0 <xTaskIncrementTick+0x164>)
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d901      	bls.n	8003c80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <xTaskIncrementTick+0x16c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d007      	beq.n	8003c98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	e004      	b.n	8003c98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <xTaskIncrementTick+0x170>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3301      	adds	r3, #1
 8003c94:	4a0d      	ldr	r2, [pc, #52]	; (8003ccc <xTaskIncrementTick+0x170>)
 8003c96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c98:	697b      	ldr	r3, [r7, #20]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	24000d0c 	.word	0x24000d0c
 8003ca8:	24000ce8 	.word	0x24000ce8
 8003cac:	24000c9c 	.word	0x24000c9c
 8003cb0:	24000ca0 	.word	0x24000ca0
 8003cb4:	24000cfc 	.word	0x24000cfc
 8003cb8:	24000d04 	.word	0x24000d04
 8003cbc:	24000cec 	.word	0x24000cec
 8003cc0:	24000814 	.word	0x24000814
 8003cc4:	24000810 	.word	0x24000810
 8003cc8:	24000cf8 	.word	0x24000cf8
 8003ccc:	24000cf4 	.word	0x24000cf4

08003cd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cd6:	4b2a      	ldr	r3, [pc, #168]	; (8003d80 <vTaskSwitchContext+0xb0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cde:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <vTaskSwitchContext+0xb4>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ce4:	e046      	b.n	8003d74 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003ce6:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <vTaskSwitchContext+0xb4>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cec:	4b26      	ldr	r3, [pc, #152]	; (8003d88 <vTaskSwitchContext+0xb8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	e010      	b.n	8003d16 <vTaskSwitchContext+0x46>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <vTaskSwitchContext+0x40>
	__asm volatile
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	607b      	str	r3, [r7, #4]
}
 8003d0c:	bf00      	nop
 8003d0e:	e7fe      	b.n	8003d0e <vTaskSwitchContext+0x3e>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	491d      	ldr	r1, [pc, #116]	; (8003d8c <vTaskSwitchContext+0xbc>)
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0e4      	beq.n	8003cf4 <vTaskSwitchContext+0x24>
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4a15      	ldr	r2, [pc, #84]	; (8003d8c <vTaskSwitchContext+0xbc>)
 8003d36:	4413      	add	r3, r2
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	605a      	str	r2, [r3, #4]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d104      	bne.n	8003d5a <vTaskSwitchContext+0x8a>
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4a0b      	ldr	r2, [pc, #44]	; (8003d90 <vTaskSwitchContext+0xc0>)
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <vTaskSwitchContext+0xb8>)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d6a:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <vTaskSwitchContext+0xc0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3354      	adds	r3, #84	; 0x54
 8003d70:	4a08      	ldr	r2, [pc, #32]	; (8003d94 <vTaskSwitchContext+0xc4>)
 8003d72:	6013      	str	r3, [r2, #0]
}
 8003d74:	bf00      	nop
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	24000d0c 	.word	0x24000d0c
 8003d84:	24000cf8 	.word	0x24000cf8
 8003d88:	24000cec 	.word	0x24000cec
 8003d8c:	24000814 	.word	0x24000814
 8003d90:	24000810 	.word	0x24000810
 8003d94:	24000014 	.word	0x24000014

08003d98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	60fb      	str	r3, [r7, #12]
}
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dbe:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <vTaskPlaceOnEventList+0x44>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3318      	adds	r3, #24
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fe fe61 	bl	8002a8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003dcc:	2101      	movs	r1, #1
 8003dce:	6838      	ldr	r0, [r7, #0]
 8003dd0:	f000 fa80 	bl	80042d4 <prvAddCurrentTaskToDelayedList>
}
 8003dd4:	bf00      	nop
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	24000810 	.word	0x24000810

08003de0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10a      	bne.n	8003e08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	617b      	str	r3, [r7, #20]
}
 8003e04:	bf00      	nop
 8003e06:	e7fe      	b.n	8003e06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e08:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3318      	adds	r3, #24
 8003e0e:	4619      	mov	r1, r3
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7fe fe18 	bl	8002a46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	68b8      	ldr	r0, [r7, #8]
 8003e26:	f000 fa55 	bl	80042d4 <prvAddCurrentTaskToDelayedList>
	}
 8003e2a:	bf00      	nop
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	24000810 	.word	0x24000810

08003e38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	60fb      	str	r3, [r7, #12]
}
 8003e60:	bf00      	nop
 8003e62:	e7fe      	b.n	8003e62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	3318      	adds	r3, #24
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe fe49 	bl	8002b00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ee8 <xTaskRemoveFromEventList+0xb0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d11d      	bne.n	8003eb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fe40 	bl	8002b00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e84:	4b19      	ldr	r3, [pc, #100]	; (8003eec <xTaskRemoveFromEventList+0xb4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d903      	bls.n	8003e94 <xTaskRemoveFromEventList+0x5c>
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	4a16      	ldr	r2, [pc, #88]	; (8003eec <xTaskRemoveFromEventList+0xb4>)
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4a13      	ldr	r2, [pc, #76]	; (8003ef0 <xTaskRemoveFromEventList+0xb8>)
 8003ea2:	441a      	add	r2, r3
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	f7fe fdcb 	bl	8002a46 <vListInsertEnd>
 8003eb0:	e005      	b.n	8003ebe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	3318      	adds	r3, #24
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	480e      	ldr	r0, [pc, #56]	; (8003ef4 <xTaskRemoveFromEventList+0xbc>)
 8003eba:	f7fe fdc4 	bl	8002a46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <xTaskRemoveFromEventList+0xc0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d905      	bls.n	8003ed8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ed0:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <xTaskRemoveFromEventList+0xc4>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	e001      	b.n	8003edc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003edc:	697b      	ldr	r3, [r7, #20]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	24000d0c 	.word	0x24000d0c
 8003eec:	24000cec 	.word	0x24000cec
 8003ef0:	24000814 	.word	0x24000814
 8003ef4:	24000ca4 	.word	0x24000ca4
 8003ef8:	24000810 	.word	0x24000810
 8003efc:	24000cf8 	.word	0x24000cf8

08003f00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <vTaskInternalSetTimeOutState+0x24>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f10:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <vTaskInternalSetTimeOutState+0x28>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	605a      	str	r2, [r3, #4]
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	24000cfc 	.word	0x24000cfc
 8003f28:	24000ce8 	.word	0x24000ce8

08003f2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10a      	bne.n	8003f52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f40:	f383 8811 	msr	BASEPRI, r3
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	613b      	str	r3, [r7, #16]
}
 8003f4e:	bf00      	nop
 8003f50:	e7fe      	b.n	8003f50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10a      	bne.n	8003f6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	60fb      	str	r3, [r7, #12]
}
 8003f6a:	bf00      	nop
 8003f6c:	e7fe      	b.n	8003f6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f6e:	f000 fe81 	bl	8004c74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f72:	4b1d      	ldr	r3, [pc, #116]	; (8003fe8 <xTaskCheckForTimeOut+0xbc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8a:	d102      	bne.n	8003f92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	e023      	b.n	8003fda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	4b15      	ldr	r3, [pc, #84]	; (8003fec <xTaskCheckForTimeOut+0xc0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d007      	beq.n	8003fae <xTaskCheckForTimeOut+0x82>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d302      	bcc.n	8003fae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	61fb      	str	r3, [r7, #28]
 8003fac:	e015      	b.n	8003fda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d20b      	bcs.n	8003fd0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	1ad2      	subs	r2, r2, r3
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff ff9b 	bl	8003f00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	e004      	b.n	8003fda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fda:	f000 fe7b 	bl	8004cd4 <vPortExitCritical>

	return xReturn;
 8003fde:	69fb      	ldr	r3, [r7, #28]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3720      	adds	r7, #32
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	24000ce8 	.word	0x24000ce8
 8003fec:	24000cfc 	.word	0x24000cfc

08003ff0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ff4:	4b03      	ldr	r3, [pc, #12]	; (8004004 <vTaskMissedYield+0x14>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
}
 8003ffa:	bf00      	nop
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	24000cf8 	.word	0x24000cf8

08004008 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004010:	f000 f852 	bl	80040b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004014:	4b06      	ldr	r3, [pc, #24]	; (8004030 <prvIdleTask+0x28>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d9f9      	bls.n	8004010 <prvIdleTask+0x8>
			{
				taskYIELD();
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <prvIdleTask+0x2c>)
 800401e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800402c:	e7f0      	b.n	8004010 <prvIdleTask+0x8>
 800402e:	bf00      	nop
 8004030:	24000814 	.word	0x24000814
 8004034:	e000ed04 	.word	0xe000ed04

08004038 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800403e:	2300      	movs	r3, #0
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	e00c      	b.n	800405e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4a12      	ldr	r2, [pc, #72]	; (8004098 <prvInitialiseTaskLists+0x60>)
 8004050:	4413      	add	r3, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f7fe fcca 	bl	80029ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3301      	adds	r3, #1
 800405c:	607b      	str	r3, [r7, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b37      	cmp	r3, #55	; 0x37
 8004062:	d9ef      	bls.n	8004044 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004064:	480d      	ldr	r0, [pc, #52]	; (800409c <prvInitialiseTaskLists+0x64>)
 8004066:	f7fe fcc1 	bl	80029ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800406a:	480d      	ldr	r0, [pc, #52]	; (80040a0 <prvInitialiseTaskLists+0x68>)
 800406c:	f7fe fcbe 	bl	80029ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004070:	480c      	ldr	r0, [pc, #48]	; (80040a4 <prvInitialiseTaskLists+0x6c>)
 8004072:	f7fe fcbb 	bl	80029ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004076:	480c      	ldr	r0, [pc, #48]	; (80040a8 <prvInitialiseTaskLists+0x70>)
 8004078:	f7fe fcb8 	bl	80029ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800407c:	480b      	ldr	r0, [pc, #44]	; (80040ac <prvInitialiseTaskLists+0x74>)
 800407e:	f7fe fcb5 	bl	80029ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004082:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <prvInitialiseTaskLists+0x78>)
 8004084:	4a05      	ldr	r2, [pc, #20]	; (800409c <prvInitialiseTaskLists+0x64>)
 8004086:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004088:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <prvInitialiseTaskLists+0x7c>)
 800408a:	4a05      	ldr	r2, [pc, #20]	; (80040a0 <prvInitialiseTaskLists+0x68>)
 800408c:	601a      	str	r2, [r3, #0]
}
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	24000814 	.word	0x24000814
 800409c:	24000c74 	.word	0x24000c74
 80040a0:	24000c88 	.word	0x24000c88
 80040a4:	24000ca4 	.word	0x24000ca4
 80040a8:	24000cb8 	.word	0x24000cb8
 80040ac:	24000cd0 	.word	0x24000cd0
 80040b0:	24000c9c 	.word	0x24000c9c
 80040b4:	24000ca0 	.word	0x24000ca0

080040b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040be:	e019      	b.n	80040f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040c0:	f000 fdd8 	bl	8004c74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040c4:	4b10      	ldr	r3, [pc, #64]	; (8004108 <prvCheckTasksWaitingTermination+0x50>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fe fd15 	bl	8002b00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040d6:	4b0d      	ldr	r3, [pc, #52]	; (800410c <prvCheckTasksWaitingTermination+0x54>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3b01      	subs	r3, #1
 80040dc:	4a0b      	ldr	r2, [pc, #44]	; (800410c <prvCheckTasksWaitingTermination+0x54>)
 80040de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <prvCheckTasksWaitingTermination+0x58>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <prvCheckTasksWaitingTermination+0x58>)
 80040e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040ea:	f000 fdf3 	bl	8004cd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f810 	bl	8004114 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <prvCheckTasksWaitingTermination+0x58>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e1      	bne.n	80040c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	24000cb8 	.word	0x24000cb8
 800410c:	24000ce4 	.word	0x24000ce4
 8004110:	24000ccc 	.word	0x24000ccc

08004114 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3354      	adds	r3, #84	; 0x54
 8004120:	4618      	mov	r0, r3
 8004122:	f001 f8fd 	bl	8005320 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800412c:	2b00      	cmp	r3, #0
 800412e:	d108      	bne.n	8004142 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	4618      	mov	r0, r3
 8004136:	f000 ff8b 	bl	8005050 <vPortFree>
				vPortFree( pxTCB );
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 ff88 	bl	8005050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004140:	e018      	b.n	8004174 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004148:	2b01      	cmp	r3, #1
 800414a:	d103      	bne.n	8004154 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 ff7f 	bl	8005050 <vPortFree>
	}
 8004152:	e00f      	b.n	8004174 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800415a:	2b02      	cmp	r3, #2
 800415c:	d00a      	beq.n	8004174 <prvDeleteTCB+0x60>
	__asm volatile
 800415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	60fb      	str	r3, [r7, #12]
}
 8004170:	bf00      	nop
 8004172:	e7fe      	b.n	8004172 <prvDeleteTCB+0x5e>
	}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004182:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <prvResetNextTaskUnblockTime+0x38>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d104      	bne.n	8004196 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800418c:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <prvResetNextTaskUnblockTime+0x3c>)
 800418e:	f04f 32ff 	mov.w	r2, #4294967295
 8004192:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004194:	e008      	b.n	80041a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004196:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <prvResetNextTaskUnblockTime+0x38>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4a04      	ldr	r2, [pc, #16]	; (80041b8 <prvResetNextTaskUnblockTime+0x3c>)
 80041a6:	6013      	str	r3, [r2, #0]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	24000c9c 	.word	0x24000c9c
 80041b8:	24000d04 	.word	0x24000d04

080041bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041c2:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <xTaskGetSchedulerState+0x34>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d102      	bne.n	80041d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041ca:	2301      	movs	r3, #1
 80041cc:	607b      	str	r3, [r7, #4]
 80041ce:	e008      	b.n	80041e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041d0:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <xTaskGetSchedulerState+0x38>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d102      	bne.n	80041de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041d8:	2302      	movs	r3, #2
 80041da:	607b      	str	r3, [r7, #4]
 80041dc:	e001      	b.n	80041e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041de:	2300      	movs	r3, #0
 80041e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041e2:	687b      	ldr	r3, [r7, #4]
	}
 80041e4:	4618      	mov	r0, r3
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	24000cf0 	.word	0x24000cf0
 80041f4:	24000d0c 	.word	0x24000d0c

080041f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d056      	beq.n	80042bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800420e:	4b2e      	ldr	r3, [pc, #184]	; (80042c8 <xTaskPriorityDisinherit+0xd0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	429a      	cmp	r2, r3
 8004216:	d00a      	beq.n	800422e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	60fb      	str	r3, [r7, #12]
}
 800422a:	bf00      	nop
 800422c:	e7fe      	b.n	800422c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10a      	bne.n	800424c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	60bb      	str	r3, [r7, #8]
}
 8004248:	bf00      	nop
 800424a:	e7fe      	b.n	800424a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004250:	1e5a      	subs	r2, r3, #1
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425e:	429a      	cmp	r2, r3
 8004260:	d02c      	beq.n	80042bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004266:	2b00      	cmp	r3, #0
 8004268:	d128      	bne.n	80042bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	3304      	adds	r3, #4
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe fc46 	bl	8002b00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428c:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <xTaskPriorityDisinherit+0xd4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d903      	bls.n	800429c <xTaskPriorityDisinherit+0xa4>
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	4a0c      	ldr	r2, [pc, #48]	; (80042cc <xTaskPriorityDisinherit+0xd4>)
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4a09      	ldr	r2, [pc, #36]	; (80042d0 <xTaskPriorityDisinherit+0xd8>)
 80042aa:	441a      	add	r2, r3
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	3304      	adds	r3, #4
 80042b0:	4619      	mov	r1, r3
 80042b2:	4610      	mov	r0, r2
 80042b4:	f7fe fbc7 	bl	8002a46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042b8:	2301      	movs	r3, #1
 80042ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042bc:	697b      	ldr	r3, [r7, #20]
	}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	24000810 	.word	0x24000810
 80042cc:	24000cec 	.word	0x24000cec
 80042d0:	24000814 	.word	0x24000814

080042d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042de:	4b21      	ldr	r3, [pc, #132]	; (8004364 <prvAddCurrentTaskToDelayedList+0x90>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042e4:	4b20      	ldr	r3, [pc, #128]	; (8004368 <prvAddCurrentTaskToDelayedList+0x94>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3304      	adds	r3, #4
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe fc08 	bl	8002b00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f6:	d10a      	bne.n	800430e <prvAddCurrentTaskToDelayedList+0x3a>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d007      	beq.n	800430e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042fe:	4b1a      	ldr	r3, [pc, #104]	; (8004368 <prvAddCurrentTaskToDelayedList+0x94>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3304      	adds	r3, #4
 8004304:	4619      	mov	r1, r3
 8004306:	4819      	ldr	r0, [pc, #100]	; (800436c <prvAddCurrentTaskToDelayedList+0x98>)
 8004308:	f7fe fb9d 	bl	8002a46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800430c:	e026      	b.n	800435c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4413      	add	r3, r2
 8004314:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004316:	4b14      	ldr	r3, [pc, #80]	; (8004368 <prvAddCurrentTaskToDelayedList+0x94>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	429a      	cmp	r2, r3
 8004324:	d209      	bcs.n	800433a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004326:	4b12      	ldr	r3, [pc, #72]	; (8004370 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <prvAddCurrentTaskToDelayedList+0x94>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3304      	adds	r3, #4
 8004330:	4619      	mov	r1, r3
 8004332:	4610      	mov	r0, r2
 8004334:	f7fe fbab 	bl	8002a8e <vListInsert>
}
 8004338:	e010      	b.n	800435c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800433a:	4b0e      	ldr	r3, [pc, #56]	; (8004374 <prvAddCurrentTaskToDelayedList+0xa0>)
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <prvAddCurrentTaskToDelayedList+0x94>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3304      	adds	r3, #4
 8004344:	4619      	mov	r1, r3
 8004346:	4610      	mov	r0, r2
 8004348:	f7fe fba1 	bl	8002a8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <prvAddCurrentTaskToDelayedList+0xa4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	429a      	cmp	r2, r3
 8004354:	d202      	bcs.n	800435c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004356:	4a08      	ldr	r2, [pc, #32]	; (8004378 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	6013      	str	r3, [r2, #0]
}
 800435c:	bf00      	nop
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	24000ce8 	.word	0x24000ce8
 8004368:	24000810 	.word	0x24000810
 800436c:	24000cd0 	.word	0x24000cd0
 8004370:	24000ca0 	.word	0x24000ca0
 8004374:	24000c9c 	.word	0x24000c9c
 8004378:	24000d04 	.word	0x24000d04

0800437c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08a      	sub	sp, #40	; 0x28
 8004380:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004386:	f000 fb07 	bl	8004998 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800438a:	4b1c      	ldr	r3, [pc, #112]	; (80043fc <xTimerCreateTimerTask+0x80>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d021      	beq.n	80043d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004396:	2300      	movs	r3, #0
 8004398:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800439a:	1d3a      	adds	r2, r7, #4
 800439c:	f107 0108 	add.w	r1, r7, #8
 80043a0:	f107 030c 	add.w	r3, r7, #12
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fe fb07 	bl	80029b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	9202      	str	r2, [sp, #8]
 80043b2:	9301      	str	r3, [sp, #4]
 80043b4:	2302      	movs	r3, #2
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	2300      	movs	r3, #0
 80043ba:	460a      	mov	r2, r1
 80043bc:	4910      	ldr	r1, [pc, #64]	; (8004400 <xTimerCreateTimerTask+0x84>)
 80043be:	4811      	ldr	r0, [pc, #68]	; (8004404 <xTimerCreateTimerTask+0x88>)
 80043c0:	f7ff f8b4 	bl	800352c <xTaskCreateStatic>
 80043c4:	4603      	mov	r3, r0
 80043c6:	4a10      	ldr	r2, [pc, #64]	; (8004408 <xTimerCreateTimerTask+0x8c>)
 80043c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80043ca:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <xTimerCreateTimerTask+0x8c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80043d2:	2301      	movs	r3, #1
 80043d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10a      	bne.n	80043f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	613b      	str	r3, [r7, #16]
}
 80043ee:	bf00      	nop
 80043f0:	e7fe      	b.n	80043f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80043f2:	697b      	ldr	r3, [r7, #20]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	24000d40 	.word	0x24000d40
 8004400:	080054b8 	.word	0x080054b8
 8004404:	08004541 	.word	0x08004541
 8004408:	24000d44 	.word	0x24000d44

0800440c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	; 0x28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800441a:	2300      	movs	r3, #0
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	623b      	str	r3, [r7, #32]
}
 8004436:	bf00      	nop
 8004438:	e7fe      	b.n	8004438 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800443a:	4b1a      	ldr	r3, [pc, #104]	; (80044a4 <xTimerGenericCommand+0x98>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d02a      	beq.n	8004498 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b05      	cmp	r3, #5
 8004452:	dc18      	bgt.n	8004486 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004454:	f7ff feb2 	bl	80041bc <xTaskGetSchedulerState>
 8004458:	4603      	mov	r3, r0
 800445a:	2b02      	cmp	r3, #2
 800445c:	d109      	bne.n	8004472 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800445e:	4b11      	ldr	r3, [pc, #68]	; (80044a4 <xTimerGenericCommand+0x98>)
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	f107 0110 	add.w	r1, r7, #16
 8004466:	2300      	movs	r3, #0
 8004468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446a:	f7fe fc77 	bl	8002d5c <xQueueGenericSend>
 800446e:	6278      	str	r0, [r7, #36]	; 0x24
 8004470:	e012      	b.n	8004498 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004472:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <xTimerGenericCommand+0x98>)
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	f107 0110 	add.w	r1, r7, #16
 800447a:	2300      	movs	r3, #0
 800447c:	2200      	movs	r2, #0
 800447e:	f7fe fc6d 	bl	8002d5c <xQueueGenericSend>
 8004482:	6278      	str	r0, [r7, #36]	; 0x24
 8004484:	e008      	b.n	8004498 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004486:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <xTimerGenericCommand+0x98>)
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	f107 0110 	add.w	r1, r7, #16
 800448e:	2300      	movs	r3, #0
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	f7fe fd61 	bl	8002f58 <xQueueGenericSendFromISR>
 8004496:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800449a:	4618      	mov	r0, r3
 800449c:	3728      	adds	r7, #40	; 0x28
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	24000d40 	.word	0x24000d40

080044a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044b2:	4b22      	ldr	r3, [pc, #136]	; (800453c <prvProcessExpiredTimer+0x94>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	3304      	adds	r3, #4
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fe fb1d 	bl	8002b00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d022      	beq.n	800451a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	699a      	ldr	r2, [r3, #24]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	18d1      	adds	r1, r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	6978      	ldr	r0, [r7, #20]
 80044e2:	f000 f8d1 	bl	8004688 <prvInsertTimerInActiveList>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01f      	beq.n	800452c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044ec:	2300      	movs	r3, #0
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	2300      	movs	r3, #0
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	2100      	movs	r1, #0
 80044f6:	6978      	ldr	r0, [r7, #20]
 80044f8:	f7ff ff88 	bl	800440c <xTimerGenericCommand>
 80044fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d113      	bne.n	800452c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	60fb      	str	r3, [r7, #12]
}
 8004516:	bf00      	nop
 8004518:	e7fe      	b.n	8004518 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004520:	f023 0301 	bic.w	r3, r3, #1
 8004524:	b2da      	uxtb	r2, r3
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	6978      	ldr	r0, [r7, #20]
 8004532:	4798      	blx	r3
}
 8004534:	bf00      	nop
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	24000d38 	.word	0x24000d38

08004540 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004548:	f107 0308 	add.w	r3, r7, #8
 800454c:	4618      	mov	r0, r3
 800454e:	f000 f857 	bl	8004600 <prvGetNextExpireTime>
 8004552:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4619      	mov	r1, r3
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f803 	bl	8004564 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800455e:	f000 f8d5 	bl	800470c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004562:	e7f1      	b.n	8004548 <prvTimerTask+0x8>

08004564 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800456e:	f7ff fa39 	bl	80039e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004572:	f107 0308 	add.w	r3, r7, #8
 8004576:	4618      	mov	r0, r3
 8004578:	f000 f866 	bl	8004648 <prvSampleTimeNow>
 800457c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d130      	bne.n	80045e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <prvProcessTimerOrBlockTask+0x3c>
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	429a      	cmp	r2, r3
 8004590:	d806      	bhi.n	80045a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004592:	f7ff fa35 	bl	8003a00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff ff85 	bl	80044a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800459e:	e024      	b.n	80045ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80045a6:	4b13      	ldr	r3, [pc, #76]	; (80045f4 <prvProcessTimerOrBlockTask+0x90>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <prvProcessTimerOrBlockTask+0x50>
 80045b0:	2301      	movs	r3, #1
 80045b2:	e000      	b.n	80045b6 <prvProcessTimerOrBlockTask+0x52>
 80045b4:	2300      	movs	r3, #0
 80045b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80045b8:	4b0f      	ldr	r3, [pc, #60]	; (80045f8 <prvProcessTimerOrBlockTask+0x94>)
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	4619      	mov	r1, r3
 80045c6:	f7fe ff7d 	bl	80034c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80045ca:	f7ff fa19 	bl	8003a00 <xTaskResumeAll>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10a      	bne.n	80045ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80045d4:	4b09      	ldr	r3, [pc, #36]	; (80045fc <prvProcessTimerOrBlockTask+0x98>)
 80045d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	f3bf 8f6f 	isb	sy
}
 80045e4:	e001      	b.n	80045ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80045e6:	f7ff fa0b 	bl	8003a00 <xTaskResumeAll>
}
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	24000d3c 	.word	0x24000d3c
 80045f8:	24000d40 	.word	0x24000d40
 80045fc:	e000ed04 	.word	0xe000ed04

08004600 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004608:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <prvGetNextExpireTime+0x44>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <prvGetNextExpireTime+0x16>
 8004612:	2201      	movs	r2, #1
 8004614:	e000      	b.n	8004618 <prvGetNextExpireTime+0x18>
 8004616:	2200      	movs	r2, #0
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d105      	bne.n	8004630 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004624:	4b07      	ldr	r3, [pc, #28]	; (8004644 <prvGetNextExpireTime+0x44>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	e001      	b.n	8004634 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004634:	68fb      	ldr	r3, [r7, #12]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	24000d38 	.word	0x24000d38

08004648 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004650:	f7ff fa74 	bl	8003b3c <xTaskGetTickCount>
 8004654:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004656:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <prvSampleTimeNow+0x3c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	429a      	cmp	r2, r3
 800465e:	d205      	bcs.n	800466c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004660:	f000 f936 	bl	80048d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	e002      	b.n	8004672 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004672:	4a04      	ldr	r2, [pc, #16]	; (8004684 <prvSampleTimeNow+0x3c>)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004678:	68fb      	ldr	r3, [r7, #12]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	24000d48 	.word	0x24000d48

08004688 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d812      	bhi.n	80046d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	1ad2      	subs	r2, r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d302      	bcc.n	80046c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80046bc:	2301      	movs	r3, #1
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	e01b      	b.n	80046fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80046c2:	4b10      	ldr	r3, [pc, #64]	; (8004704 <prvInsertTimerInActiveList+0x7c>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3304      	adds	r3, #4
 80046ca:	4619      	mov	r1, r3
 80046cc:	4610      	mov	r0, r2
 80046ce:	f7fe f9de 	bl	8002a8e <vListInsert>
 80046d2:	e012      	b.n	80046fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d206      	bcs.n	80046ea <prvInsertTimerInActiveList+0x62>
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d302      	bcc.n	80046ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80046e4:	2301      	movs	r3, #1
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	e007      	b.n	80046fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046ea:	4b07      	ldr	r3, [pc, #28]	; (8004708 <prvInsertTimerInActiveList+0x80>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3304      	adds	r3, #4
 80046f2:	4619      	mov	r1, r3
 80046f4:	4610      	mov	r0, r2
 80046f6:	f7fe f9ca 	bl	8002a8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80046fa:	697b      	ldr	r3, [r7, #20]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	24000d3c 	.word	0x24000d3c
 8004708:	24000d38 	.word	0x24000d38

0800470c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08e      	sub	sp, #56	; 0x38
 8004710:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004712:	e0ca      	b.n	80048aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	da18      	bge.n	800474c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800471a:	1d3b      	adds	r3, r7, #4
 800471c:	3304      	adds	r3, #4
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10a      	bne.n	800473c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	61fb      	str	r3, [r7, #28]
}
 8004738:	bf00      	nop
 800473a:	e7fe      	b.n	800473a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800473c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004742:	6850      	ldr	r0, [r2, #4]
 8004744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004746:	6892      	ldr	r2, [r2, #8]
 8004748:	4611      	mov	r1, r2
 800474a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	f2c0 80aa 	blt.w	80048a8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d004      	beq.n	800476a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	3304      	adds	r3, #4
 8004764:	4618      	mov	r0, r3
 8004766:	f7fe f9cb 	bl	8002b00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800476a:	463b      	mov	r3, r7
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff ff6b 	bl	8004648 <prvSampleTimeNow>
 8004772:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b09      	cmp	r3, #9
 8004778:	f200 8097 	bhi.w	80048aa <prvProcessReceivedCommands+0x19e>
 800477c:	a201      	add	r2, pc, #4	; (adr r2, 8004784 <prvProcessReceivedCommands+0x78>)
 800477e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004782:	bf00      	nop
 8004784:	080047ad 	.word	0x080047ad
 8004788:	080047ad 	.word	0x080047ad
 800478c:	080047ad 	.word	0x080047ad
 8004790:	08004821 	.word	0x08004821
 8004794:	08004835 	.word	0x08004835
 8004798:	0800487f 	.word	0x0800487f
 800479c:	080047ad 	.word	0x080047ad
 80047a0:	080047ad 	.word	0x080047ad
 80047a4:	08004821 	.word	0x08004821
 80047a8:	08004835 	.word	0x08004835
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	18d1      	adds	r1, r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047cc:	f7ff ff5c 	bl	8004688 <prvInsertTimerInActiveList>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d069      	beq.n	80048aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d05e      	beq.n	80048aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	441a      	add	r2, r3
 80047f4:	2300      	movs	r3, #0
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	2300      	movs	r3, #0
 80047fa:	2100      	movs	r1, #0
 80047fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047fe:	f7ff fe05 	bl	800440c <xTimerGenericCommand>
 8004802:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d14f      	bne.n	80048aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	61bb      	str	r3, [r7, #24]
}
 800481c:	bf00      	nop
 800481e:	e7fe      	b.n	800481e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	b2da      	uxtb	r2, r3
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004832:	e03a      	b.n	80048aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	b2da      	uxtb	r2, r3
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10a      	bne.n	800486a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	617b      	str	r3, [r7, #20]
}
 8004866:	bf00      	nop
 8004868:	e7fe      	b.n	8004868 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	18d1      	adds	r1, r2, r3
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004878:	f7ff ff06 	bl	8004688 <prvInsertTimerInActiveList>
					break;
 800487c:	e015      	b.n	80048aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d103      	bne.n	8004894 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800488c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800488e:	f000 fbdf 	bl	8005050 <vPortFree>
 8004892:	e00a      	b.n	80048aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80048a6:	e000      	b.n	80048aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80048a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048aa:	4b08      	ldr	r3, [pc, #32]	; (80048cc <prvProcessReceivedCommands+0x1c0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	1d39      	adds	r1, r7, #4
 80048b0:	2200      	movs	r2, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fe fbec 	bl	8003090 <xQueueReceive>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f47f af2a 	bne.w	8004714 <prvProcessReceivedCommands+0x8>
	}
}
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
 80048c4:	3730      	adds	r7, #48	; 0x30
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	24000d40 	.word	0x24000d40

080048d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048d6:	e048      	b.n	800496a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048d8:	4b2d      	ldr	r3, [pc, #180]	; (8004990 <prvSwitchTimerLists+0xc0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048e2:	4b2b      	ldr	r3, [pc, #172]	; (8004990 <prvSwitchTimerLists+0xc0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3304      	adds	r3, #4
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fe f905 	bl	8002b00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d02e      	beq.n	800496a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4413      	add	r3, r2
 8004914:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	429a      	cmp	r2, r3
 800491c:	d90e      	bls.n	800493c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800492a:	4b19      	ldr	r3, [pc, #100]	; (8004990 <prvSwitchTimerLists+0xc0>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3304      	adds	r3, #4
 8004932:	4619      	mov	r1, r3
 8004934:	4610      	mov	r0, r2
 8004936:	f7fe f8aa 	bl	8002a8e <vListInsert>
 800493a:	e016      	b.n	800496a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800493c:	2300      	movs	r3, #0
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	2300      	movs	r3, #0
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	2100      	movs	r1, #0
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f7ff fd60 	bl	800440c <xTimerGenericCommand>
 800494c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10a      	bne.n	800496a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	603b      	str	r3, [r7, #0]
}
 8004966:	bf00      	nop
 8004968:	e7fe      	b.n	8004968 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800496a:	4b09      	ldr	r3, [pc, #36]	; (8004990 <prvSwitchTimerLists+0xc0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1b1      	bne.n	80048d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004974:	4b06      	ldr	r3, [pc, #24]	; (8004990 <prvSwitchTimerLists+0xc0>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800497a:	4b06      	ldr	r3, [pc, #24]	; (8004994 <prvSwitchTimerLists+0xc4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a04      	ldr	r2, [pc, #16]	; (8004990 <prvSwitchTimerLists+0xc0>)
 8004980:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004982:	4a04      	ldr	r2, [pc, #16]	; (8004994 <prvSwitchTimerLists+0xc4>)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	6013      	str	r3, [r2, #0]
}
 8004988:	bf00      	nop
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	24000d38 	.word	0x24000d38
 8004994:	24000d3c 	.word	0x24000d3c

08004998 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800499e:	f000 f969 	bl	8004c74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80049a2:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <prvCheckForValidListAndQueue+0x60>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d120      	bne.n	80049ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80049aa:	4814      	ldr	r0, [pc, #80]	; (80049fc <prvCheckForValidListAndQueue+0x64>)
 80049ac:	f7fe f81e 	bl	80029ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80049b0:	4813      	ldr	r0, [pc, #76]	; (8004a00 <prvCheckForValidListAndQueue+0x68>)
 80049b2:	f7fe f81b 	bl	80029ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80049b6:	4b13      	ldr	r3, [pc, #76]	; (8004a04 <prvCheckForValidListAndQueue+0x6c>)
 80049b8:	4a10      	ldr	r2, [pc, #64]	; (80049fc <prvCheckForValidListAndQueue+0x64>)
 80049ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80049bc:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <prvCheckForValidListAndQueue+0x70>)
 80049be:	4a10      	ldr	r2, [pc, #64]	; (8004a00 <prvCheckForValidListAndQueue+0x68>)
 80049c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80049c2:	2300      	movs	r3, #0
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <prvCheckForValidListAndQueue+0x74>)
 80049c8:	4a11      	ldr	r2, [pc, #68]	; (8004a10 <prvCheckForValidListAndQueue+0x78>)
 80049ca:	2110      	movs	r1, #16
 80049cc:	200a      	movs	r0, #10
 80049ce:	f7fe f929 	bl	8002c24 <xQueueGenericCreateStatic>
 80049d2:	4603      	mov	r3, r0
 80049d4:	4a08      	ldr	r2, [pc, #32]	; (80049f8 <prvCheckForValidListAndQueue+0x60>)
 80049d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80049d8:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <prvCheckForValidListAndQueue+0x60>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80049e0:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <prvCheckForValidListAndQueue+0x60>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	490b      	ldr	r1, [pc, #44]	; (8004a14 <prvCheckForValidListAndQueue+0x7c>)
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fe fd42 	bl	8003470 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049ec:	f000 f972 	bl	8004cd4 <vPortExitCritical>
}
 80049f0:	bf00      	nop
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	24000d40 	.word	0x24000d40
 80049fc:	24000d10 	.word	0x24000d10
 8004a00:	24000d24 	.word	0x24000d24
 8004a04:	24000d38 	.word	0x24000d38
 8004a08:	24000d3c 	.word	0x24000d3c
 8004a0c:	24000dec 	.word	0x24000dec
 8004a10:	24000d4c 	.word	0x24000d4c
 8004a14:	080054c0 	.word	0x080054c0

08004a18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	3b04      	subs	r3, #4
 8004a28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3b04      	subs	r3, #4
 8004a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f023 0201 	bic.w	r2, r3, #1
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	3b04      	subs	r3, #4
 8004a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a48:	4a0c      	ldr	r2, [pc, #48]	; (8004a7c <pxPortInitialiseStack+0x64>)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	3b14      	subs	r3, #20
 8004a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3b04      	subs	r3, #4
 8004a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f06f 0202 	mvn.w	r2, #2
 8004a66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3b20      	subs	r3, #32
 8004a6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	08004a81 	.word	0x08004a81

08004a80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a86:	2300      	movs	r3, #0
 8004a88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a8a:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <prvTaskExitError+0x54>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a92:	d00a      	beq.n	8004aaa <prvTaskExitError+0x2a>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	60fb      	str	r3, [r7, #12]
}
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <prvTaskExitError+0x28>
	__asm volatile
 8004aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	60bb      	str	r3, [r7, #8]
}
 8004abc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004abe:	bf00      	nop
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0fc      	beq.n	8004ac0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ac6:	bf00      	nop
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	24000010 	.word	0x24000010
	...

08004ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ae0:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <pxCurrentTCBConst2>)
 8004ae2:	6819      	ldr	r1, [r3, #0]
 8004ae4:	6808      	ldr	r0, [r1, #0]
 8004ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aea:	f380 8809 	msr	PSP, r0
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f04f 0000 	mov.w	r0, #0
 8004af6:	f380 8811 	msr	BASEPRI, r0
 8004afa:	4770      	bx	lr
 8004afc:	f3af 8000 	nop.w

08004b00 <pxCurrentTCBConst2>:
 8004b00:	24000810 	.word	0x24000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop

08004b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b08:	4808      	ldr	r0, [pc, #32]	; (8004b2c <prvPortStartFirstTask+0x24>)
 8004b0a:	6800      	ldr	r0, [r0, #0]
 8004b0c:	6800      	ldr	r0, [r0, #0]
 8004b0e:	f380 8808 	msr	MSP, r0
 8004b12:	f04f 0000 	mov.w	r0, #0
 8004b16:	f380 8814 	msr	CONTROL, r0
 8004b1a:	b662      	cpsie	i
 8004b1c:	b661      	cpsie	f
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	df00      	svc	0
 8004b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b2a:	bf00      	nop
 8004b2c:	e000ed08 	.word	0xe000ed08

08004b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b36:	4b46      	ldr	r3, [pc, #280]	; (8004c50 <xPortStartScheduler+0x120>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a46      	ldr	r2, [pc, #280]	; (8004c54 <xPortStartScheduler+0x124>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d10a      	bne.n	8004b56 <xPortStartScheduler+0x26>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	613b      	str	r3, [r7, #16]
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b56:	4b3e      	ldr	r3, [pc, #248]	; (8004c50 <xPortStartScheduler+0x120>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a3f      	ldr	r2, [pc, #252]	; (8004c58 <xPortStartScheduler+0x128>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d10a      	bne.n	8004b76 <xPortStartScheduler+0x46>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	60fb      	str	r3, [r7, #12]
}
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b76:	4b39      	ldr	r3, [pc, #228]	; (8004c5c <xPortStartScheduler+0x12c>)
 8004b78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	22ff      	movs	r2, #255	; 0xff
 8004b86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	4b31      	ldr	r3, [pc, #196]	; (8004c60 <xPortStartScheduler+0x130>)
 8004b9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b9e:	4b31      	ldr	r3, [pc, #196]	; (8004c64 <xPortStartScheduler+0x134>)
 8004ba0:	2207      	movs	r2, #7
 8004ba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ba4:	e009      	b.n	8004bba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004ba6:	4b2f      	ldr	r3, [pc, #188]	; (8004c64 <xPortStartScheduler+0x134>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	4a2d      	ldr	r2, [pc, #180]	; (8004c64 <xPortStartScheduler+0x134>)
 8004bae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bba:	78fb      	ldrb	r3, [r7, #3]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc2:	2b80      	cmp	r3, #128	; 0x80
 8004bc4:	d0ef      	beq.n	8004ba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bc6:	4b27      	ldr	r3, [pc, #156]	; (8004c64 <xPortStartScheduler+0x134>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f1c3 0307 	rsb	r3, r3, #7
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d00a      	beq.n	8004be8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	60bb      	str	r3, [r7, #8]
}
 8004be4:	bf00      	nop
 8004be6:	e7fe      	b.n	8004be6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004be8:	4b1e      	ldr	r3, [pc, #120]	; (8004c64 <xPortStartScheduler+0x134>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	4a1d      	ldr	r2, [pc, #116]	; (8004c64 <xPortStartScheduler+0x134>)
 8004bf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004bf2:	4b1c      	ldr	r3, [pc, #112]	; (8004c64 <xPortStartScheduler+0x134>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bfa:	4a1a      	ldr	r2, [pc, #104]	; (8004c64 <xPortStartScheduler+0x134>)
 8004bfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c06:	4b18      	ldr	r3, [pc, #96]	; (8004c68 <xPortStartScheduler+0x138>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a17      	ldr	r2, [pc, #92]	; (8004c68 <xPortStartScheduler+0x138>)
 8004c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c12:	4b15      	ldr	r3, [pc, #84]	; (8004c68 <xPortStartScheduler+0x138>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <xPortStartScheduler+0x138>)
 8004c18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c1e:	f000 f8dd 	bl	8004ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c22:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <xPortStartScheduler+0x13c>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c28:	f000 f8fc 	bl	8004e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c2c:	4b10      	ldr	r3, [pc, #64]	; (8004c70 <xPortStartScheduler+0x140>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a0f      	ldr	r2, [pc, #60]	; (8004c70 <xPortStartScheduler+0x140>)
 8004c32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c38:	f7ff ff66 	bl	8004b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c3c:	f7ff f848 	bl	8003cd0 <vTaskSwitchContext>
	prvTaskExitError();
 8004c40:	f7ff ff1e 	bl	8004a80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	e000ed00 	.word	0xe000ed00
 8004c54:	410fc271 	.word	0x410fc271
 8004c58:	410fc270 	.word	0x410fc270
 8004c5c:	e000e400 	.word	0xe000e400
 8004c60:	24000e3c 	.word	0x24000e3c
 8004c64:	24000e40 	.word	0x24000e40
 8004c68:	e000ed20 	.word	0xe000ed20
 8004c6c:	24000010 	.word	0x24000010
 8004c70:	e000ef34 	.word	0xe000ef34

08004c74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	607b      	str	r3, [r7, #4]
}
 8004c8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ccc <vPortEnterCritical+0x58>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3301      	adds	r3, #1
 8004c94:	4a0d      	ldr	r2, [pc, #52]	; (8004ccc <vPortEnterCritical+0x58>)
 8004c96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c98:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <vPortEnterCritical+0x58>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d10f      	bne.n	8004cc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <vPortEnterCritical+0x5c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	603b      	str	r3, [r7, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	e7fe      	b.n	8004cbe <vPortEnterCritical+0x4a>
	}
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	24000010 	.word	0x24000010
 8004cd0:	e000ed04 	.word	0xe000ed04

08004cd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004cda:	4b12      	ldr	r3, [pc, #72]	; (8004d24 <vPortExitCritical+0x50>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10a      	bne.n	8004cf8 <vPortExitCritical+0x24>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	607b      	str	r3, [r7, #4]
}
 8004cf4:	bf00      	nop
 8004cf6:	e7fe      	b.n	8004cf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004cf8:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <vPortExitCritical+0x50>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	4a09      	ldr	r2, [pc, #36]	; (8004d24 <vPortExitCritical+0x50>)
 8004d00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d02:	4b08      	ldr	r3, [pc, #32]	; (8004d24 <vPortExitCritical+0x50>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d105      	bne.n	8004d16 <vPortExitCritical+0x42>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	f383 8811 	msr	BASEPRI, r3
}
 8004d14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	24000010 	.word	0x24000010
	...

08004d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d30:	f3ef 8009 	mrs	r0, PSP
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	4b15      	ldr	r3, [pc, #84]	; (8004d90 <pxCurrentTCBConst>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	f01e 0f10 	tst.w	lr, #16
 8004d40:	bf08      	it	eq
 8004d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d4a:	6010      	str	r0, [r2, #0]
 8004d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d54:	f380 8811 	msr	BASEPRI, r0
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f7fe ffb6 	bl	8003cd0 <vTaskSwitchContext>
 8004d64:	f04f 0000 	mov.w	r0, #0
 8004d68:	f380 8811 	msr	BASEPRI, r0
 8004d6c:	bc09      	pop	{r0, r3}
 8004d6e:	6819      	ldr	r1, [r3, #0]
 8004d70:	6808      	ldr	r0, [r1, #0]
 8004d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d76:	f01e 0f10 	tst.w	lr, #16
 8004d7a:	bf08      	it	eq
 8004d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d80:	f380 8809 	msr	PSP, r0
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	f3af 8000 	nop.w

08004d90 <pxCurrentTCBConst>:
 8004d90:	24000810 	.word	0x24000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop

08004d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	607b      	str	r3, [r7, #4]
}
 8004db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004db2:	f7fe fed3 	bl	8003b5c <xTaskIncrementTick>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <xPortSysTickHandler+0x40>)
 8004dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	f383 8811 	msr	BASEPRI, r3
}
 8004dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004dd0:	bf00      	nop
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	e000ed04 	.word	0xe000ed04

08004ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004de0:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <vPortSetupTimerInterrupt+0x34>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004de6:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <vPortSetupTimerInterrupt+0x38>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dec:	4b0a      	ldr	r3, [pc, #40]	; (8004e18 <vPortSetupTimerInterrupt+0x3c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a0a      	ldr	r2, [pc, #40]	; (8004e1c <vPortSetupTimerInterrupt+0x40>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	099b      	lsrs	r3, r3, #6
 8004df8:	4a09      	ldr	r2, [pc, #36]	; (8004e20 <vPortSetupTimerInterrupt+0x44>)
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dfe:	4b04      	ldr	r3, [pc, #16]	; (8004e10 <vPortSetupTimerInterrupt+0x34>)
 8004e00:	2207      	movs	r2, #7
 8004e02:	601a      	str	r2, [r3, #0]
}
 8004e04:	bf00      	nop
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	e000e010 	.word	0xe000e010
 8004e14:	e000e018 	.word	0xe000e018
 8004e18:	24000000 	.word	0x24000000
 8004e1c:	10624dd3 	.word	0x10624dd3
 8004e20:	e000e014 	.word	0xe000e014

08004e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e34 <vPortEnableVFP+0x10>
 8004e28:	6801      	ldr	r1, [r0, #0]
 8004e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e2e:	6001      	str	r1, [r0, #0]
 8004e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e32:	bf00      	nop
 8004e34:	e000ed88 	.word	0xe000ed88

08004e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e3e:	f3ef 8305 	mrs	r3, IPSR
 8004e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b0f      	cmp	r3, #15
 8004e48:	d914      	bls.n	8004e74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e4a:	4a17      	ldr	r2, [pc, #92]	; (8004ea8 <vPortValidateInterruptPriority+0x70>)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e54:	4b15      	ldr	r3, [pc, #84]	; (8004eac <vPortValidateInterruptPriority+0x74>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	7afa      	ldrb	r2, [r7, #11]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d20a      	bcs.n	8004e74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	607b      	str	r3, [r7, #4]
}
 8004e70:	bf00      	nop
 8004e72:	e7fe      	b.n	8004e72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e74:	4b0e      	ldr	r3, [pc, #56]	; (8004eb0 <vPortValidateInterruptPriority+0x78>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e7c:	4b0d      	ldr	r3, [pc, #52]	; (8004eb4 <vPortValidateInterruptPriority+0x7c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d90a      	bls.n	8004e9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	603b      	str	r3, [r7, #0]
}
 8004e96:	bf00      	nop
 8004e98:	e7fe      	b.n	8004e98 <vPortValidateInterruptPriority+0x60>
	}
 8004e9a:	bf00      	nop
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	e000e3f0 	.word	0xe000e3f0
 8004eac:	24000e3c 	.word	0x24000e3c
 8004eb0:	e000ed0c 	.word	0xe000ed0c
 8004eb4:	24000e40 	.word	0x24000e40

08004eb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08a      	sub	sp, #40	; 0x28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ec4:	f7fe fd8e 	bl	80039e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ec8:	4b5b      	ldr	r3, [pc, #364]	; (8005038 <pvPortMalloc+0x180>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ed0:	f000 f920 	bl	8005114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ed4:	4b59      	ldr	r3, [pc, #356]	; (800503c <pvPortMalloc+0x184>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4013      	ands	r3, r2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f040 8093 	bne.w	8005008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01d      	beq.n	8004f24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004ee8:	2208      	movs	r2, #8
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4413      	add	r3, r2
 8004eee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d014      	beq.n	8004f24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f023 0307 	bic.w	r3, r3, #7
 8004f00:	3308      	adds	r3, #8
 8004f02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <pvPortMalloc+0x6c>
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	617b      	str	r3, [r7, #20]
}
 8004f20:	bf00      	nop
 8004f22:	e7fe      	b.n	8004f22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d06e      	beq.n	8005008 <pvPortMalloc+0x150>
 8004f2a:	4b45      	ldr	r3, [pc, #276]	; (8005040 <pvPortMalloc+0x188>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d869      	bhi.n	8005008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f34:	4b43      	ldr	r3, [pc, #268]	; (8005044 <pvPortMalloc+0x18c>)
 8004f36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f38:	4b42      	ldr	r3, [pc, #264]	; (8005044 <pvPortMalloc+0x18c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f3e:	e004      	b.n	8004f4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d903      	bls.n	8004f5c <pvPortMalloc+0xa4>
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1f1      	bne.n	8004f40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f5c:	4b36      	ldr	r3, [pc, #216]	; (8005038 <pvPortMalloc+0x180>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d050      	beq.n	8005008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2208      	movs	r2, #8
 8004f6c:	4413      	add	r3, r2
 8004f6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	1ad2      	subs	r2, r2, r3
 8004f80:	2308      	movs	r3, #8
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d91f      	bls.n	8004fc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <pvPortMalloc+0xf8>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	613b      	str	r3, [r7, #16]
}
 8004fac:	bf00      	nop
 8004fae:	e7fe      	b.n	8004fae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	1ad2      	subs	r2, r2, r3
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fc2:	69b8      	ldr	r0, [r7, #24]
 8004fc4:	f000 f908 	bl	80051d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fc8:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <pvPortMalloc+0x188>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	4a1b      	ldr	r2, [pc, #108]	; (8005040 <pvPortMalloc+0x188>)
 8004fd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fd6:	4b1a      	ldr	r3, [pc, #104]	; (8005040 <pvPortMalloc+0x188>)
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	4b1b      	ldr	r3, [pc, #108]	; (8005048 <pvPortMalloc+0x190>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d203      	bcs.n	8004fea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fe2:	4b17      	ldr	r3, [pc, #92]	; (8005040 <pvPortMalloc+0x188>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a18      	ldr	r2, [pc, #96]	; (8005048 <pvPortMalloc+0x190>)
 8004fe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	4b13      	ldr	r3, [pc, #76]	; (800503c <pvPortMalloc+0x184>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004ffe:	4b13      	ldr	r3, [pc, #76]	; (800504c <pvPortMalloc+0x194>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3301      	adds	r3, #1
 8005004:	4a11      	ldr	r2, [pc, #68]	; (800504c <pvPortMalloc+0x194>)
 8005006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005008:	f7fe fcfa 	bl	8003a00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <pvPortMalloc+0x174>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	60fb      	str	r3, [r7, #12]
}
 8005028:	bf00      	nop
 800502a:	e7fe      	b.n	800502a <pvPortMalloc+0x172>
	return pvReturn;
 800502c:	69fb      	ldr	r3, [r7, #28]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3728      	adds	r7, #40	; 0x28
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	24004a4c 	.word	0x24004a4c
 800503c:	24004a60 	.word	0x24004a60
 8005040:	24004a50 	.word	0x24004a50
 8005044:	24004a44 	.word	0x24004a44
 8005048:	24004a54 	.word	0x24004a54
 800504c:	24004a58 	.word	0x24004a58

08005050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d04d      	beq.n	80050fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005062:	2308      	movs	r3, #8
 8005064:	425b      	negs	r3, r3
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	4413      	add	r3, r2
 800506a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	4b24      	ldr	r3, [pc, #144]	; (8005108 <vPortFree+0xb8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4013      	ands	r3, r2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10a      	bne.n	8005094 <vPortFree+0x44>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	60fb      	str	r3, [r7, #12]
}
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <vPortFree+0x62>
	__asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	60bb      	str	r3, [r7, #8]
}
 80050ae:	bf00      	nop
 80050b0:	e7fe      	b.n	80050b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	4b14      	ldr	r3, [pc, #80]	; (8005108 <vPortFree+0xb8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4013      	ands	r3, r2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01e      	beq.n	80050fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d11a      	bne.n	80050fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	4b0e      	ldr	r3, [pc, #56]	; (8005108 <vPortFree+0xb8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	43db      	mvns	r3, r3
 80050d2:	401a      	ands	r2, r3
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050d8:	f7fe fc84 	bl	80039e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	4b0a      	ldr	r3, [pc, #40]	; (800510c <vPortFree+0xbc>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4413      	add	r3, r2
 80050e6:	4a09      	ldr	r2, [pc, #36]	; (800510c <vPortFree+0xbc>)
 80050e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050ea:	6938      	ldr	r0, [r7, #16]
 80050ec:	f000 f874 	bl	80051d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80050f0:	4b07      	ldr	r3, [pc, #28]	; (8005110 <vPortFree+0xc0>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3301      	adds	r3, #1
 80050f6:	4a06      	ldr	r2, [pc, #24]	; (8005110 <vPortFree+0xc0>)
 80050f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80050fa:	f7fe fc81 	bl	8003a00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80050fe:	bf00      	nop
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	24004a60 	.word	0x24004a60
 800510c:	24004a50 	.word	0x24004a50
 8005110:	24004a5c 	.word	0x24004a5c

08005114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800511a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800511e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005120:	4b27      	ldr	r3, [pc, #156]	; (80051c0 <prvHeapInit+0xac>)
 8005122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00c      	beq.n	8005148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3307      	adds	r3, #7
 8005132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0307 	bic.w	r3, r3, #7
 800513a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	4a1f      	ldr	r2, [pc, #124]	; (80051c0 <prvHeapInit+0xac>)
 8005144:	4413      	add	r3, r2
 8005146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800514c:	4a1d      	ldr	r2, [pc, #116]	; (80051c4 <prvHeapInit+0xb0>)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005152:	4b1c      	ldr	r3, [pc, #112]	; (80051c4 <prvHeapInit+0xb0>)
 8005154:	2200      	movs	r2, #0
 8005156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	4413      	add	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005160:	2208      	movs	r2, #8
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	1a9b      	subs	r3, r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0307 	bic.w	r3, r3, #7
 800516e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4a15      	ldr	r2, [pc, #84]	; (80051c8 <prvHeapInit+0xb4>)
 8005174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005176:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <prvHeapInit+0xb4>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2200      	movs	r2, #0
 800517c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800517e:	4b12      	ldr	r3, [pc, #72]	; (80051c8 <prvHeapInit+0xb4>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	1ad2      	subs	r2, r2, r3
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005194:	4b0c      	ldr	r3, [pc, #48]	; (80051c8 <prvHeapInit+0xb4>)
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <prvHeapInit+0xb8>)
 80051a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <prvHeapInit+0xbc>)
 80051aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051ac:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <prvHeapInit+0xc0>)
 80051ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051b2:	601a      	str	r2, [r3, #0]
}
 80051b4:	bf00      	nop
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	24000e44 	.word	0x24000e44
 80051c4:	24004a44 	.word	0x24004a44
 80051c8:	24004a4c 	.word	0x24004a4c
 80051cc:	24004a54 	.word	0x24004a54
 80051d0:	24004a50 	.word	0x24004a50
 80051d4:	24004a60 	.word	0x24004a60

080051d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051e0:	4b28      	ldr	r3, [pc, #160]	; (8005284 <prvInsertBlockIntoFreeList+0xac>)
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	e002      	b.n	80051ec <prvInsertBlockIntoFreeList+0x14>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d8f7      	bhi.n	80051e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	4413      	add	r3, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	429a      	cmp	r2, r3
 8005206:	d108      	bne.n	800521a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	441a      	add	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	441a      	add	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d118      	bne.n	8005260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	4b15      	ldr	r3, [pc, #84]	; (8005288 <prvInsertBlockIntoFreeList+0xb0>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d00d      	beq.n	8005256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	441a      	add	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	e008      	b.n	8005268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005256:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <prvInsertBlockIntoFreeList+0xb0>)
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	e003      	b.n	8005268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	429a      	cmp	r2, r3
 800526e:	d002      	beq.n	8005276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005276:	bf00      	nop
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	24004a44 	.word	0x24004a44
 8005288:	24004a4c 	.word	0x24004a4c

0800528c <__libc_init_array>:
 800528c:	b570      	push	{r4, r5, r6, lr}
 800528e:	4d0d      	ldr	r5, [pc, #52]	; (80052c4 <__libc_init_array+0x38>)
 8005290:	4c0d      	ldr	r4, [pc, #52]	; (80052c8 <__libc_init_array+0x3c>)
 8005292:	1b64      	subs	r4, r4, r5
 8005294:	10a4      	asrs	r4, r4, #2
 8005296:	2600      	movs	r6, #0
 8005298:	42a6      	cmp	r6, r4
 800529a:	d109      	bne.n	80052b0 <__libc_init_array+0x24>
 800529c:	4d0b      	ldr	r5, [pc, #44]	; (80052cc <__libc_init_array+0x40>)
 800529e:	4c0c      	ldr	r4, [pc, #48]	; (80052d0 <__libc_init_array+0x44>)
 80052a0:	f000 f8f6 	bl	8005490 <_init>
 80052a4:	1b64      	subs	r4, r4, r5
 80052a6:	10a4      	asrs	r4, r4, #2
 80052a8:	2600      	movs	r6, #0
 80052aa:	42a6      	cmp	r6, r4
 80052ac:	d105      	bne.n	80052ba <__libc_init_array+0x2e>
 80052ae:	bd70      	pop	{r4, r5, r6, pc}
 80052b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b4:	4798      	blx	r3
 80052b6:	3601      	adds	r6, #1
 80052b8:	e7ee      	b.n	8005298 <__libc_init_array+0xc>
 80052ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80052be:	4798      	blx	r3
 80052c0:	3601      	adds	r6, #1
 80052c2:	e7f2      	b.n	80052aa <__libc_init_array+0x1e>
 80052c4:	0800555c 	.word	0x0800555c
 80052c8:	0800555c 	.word	0x0800555c
 80052cc:	0800555c 	.word	0x0800555c
 80052d0:	08005560 	.word	0x08005560

080052d4 <__retarget_lock_acquire_recursive>:
 80052d4:	4770      	bx	lr

080052d6 <__retarget_lock_release_recursive>:
 80052d6:	4770      	bx	lr

080052d8 <memcpy>:
 80052d8:	440a      	add	r2, r1
 80052da:	4291      	cmp	r1, r2
 80052dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80052e0:	d100      	bne.n	80052e4 <memcpy+0xc>
 80052e2:	4770      	bx	lr
 80052e4:	b510      	push	{r4, lr}
 80052e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052ee:	4291      	cmp	r1, r2
 80052f0:	d1f9      	bne.n	80052e6 <memcpy+0xe>
 80052f2:	bd10      	pop	{r4, pc}

080052f4 <memset>:
 80052f4:	4402      	add	r2, r0
 80052f6:	4603      	mov	r3, r0
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d100      	bne.n	80052fe <memset+0xa>
 80052fc:	4770      	bx	lr
 80052fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005302:	e7f9      	b.n	80052f8 <memset+0x4>

08005304 <cleanup_glue>:
 8005304:	b538      	push	{r3, r4, r5, lr}
 8005306:	460c      	mov	r4, r1
 8005308:	6809      	ldr	r1, [r1, #0]
 800530a:	4605      	mov	r5, r0
 800530c:	b109      	cbz	r1, 8005312 <cleanup_glue+0xe>
 800530e:	f7ff fff9 	bl	8005304 <cleanup_glue>
 8005312:	4621      	mov	r1, r4
 8005314:	4628      	mov	r0, r5
 8005316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800531a:	f000 b869 	b.w	80053f0 <_free_r>
	...

08005320 <_reclaim_reent>:
 8005320:	4b2c      	ldr	r3, [pc, #176]	; (80053d4 <_reclaim_reent+0xb4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4283      	cmp	r3, r0
 8005326:	b570      	push	{r4, r5, r6, lr}
 8005328:	4604      	mov	r4, r0
 800532a:	d051      	beq.n	80053d0 <_reclaim_reent+0xb0>
 800532c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800532e:	b143      	cbz	r3, 8005342 <_reclaim_reent+0x22>
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d14a      	bne.n	80053cc <_reclaim_reent+0xac>
 8005336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005338:	6819      	ldr	r1, [r3, #0]
 800533a:	b111      	cbz	r1, 8005342 <_reclaim_reent+0x22>
 800533c:	4620      	mov	r0, r4
 800533e:	f000 f857 	bl	80053f0 <_free_r>
 8005342:	6961      	ldr	r1, [r4, #20]
 8005344:	b111      	cbz	r1, 800534c <_reclaim_reent+0x2c>
 8005346:	4620      	mov	r0, r4
 8005348:	f000 f852 	bl	80053f0 <_free_r>
 800534c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800534e:	b111      	cbz	r1, 8005356 <_reclaim_reent+0x36>
 8005350:	4620      	mov	r0, r4
 8005352:	f000 f84d 	bl	80053f0 <_free_r>
 8005356:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005358:	b111      	cbz	r1, 8005360 <_reclaim_reent+0x40>
 800535a:	4620      	mov	r0, r4
 800535c:	f000 f848 	bl	80053f0 <_free_r>
 8005360:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005362:	b111      	cbz	r1, 800536a <_reclaim_reent+0x4a>
 8005364:	4620      	mov	r0, r4
 8005366:	f000 f843 	bl	80053f0 <_free_r>
 800536a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800536c:	b111      	cbz	r1, 8005374 <_reclaim_reent+0x54>
 800536e:	4620      	mov	r0, r4
 8005370:	f000 f83e 	bl	80053f0 <_free_r>
 8005374:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005376:	b111      	cbz	r1, 800537e <_reclaim_reent+0x5e>
 8005378:	4620      	mov	r0, r4
 800537a:	f000 f839 	bl	80053f0 <_free_r>
 800537e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005380:	b111      	cbz	r1, 8005388 <_reclaim_reent+0x68>
 8005382:	4620      	mov	r0, r4
 8005384:	f000 f834 	bl	80053f0 <_free_r>
 8005388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800538a:	b111      	cbz	r1, 8005392 <_reclaim_reent+0x72>
 800538c:	4620      	mov	r0, r4
 800538e:	f000 f82f 	bl	80053f0 <_free_r>
 8005392:	69a3      	ldr	r3, [r4, #24]
 8005394:	b1e3      	cbz	r3, 80053d0 <_reclaim_reent+0xb0>
 8005396:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005398:	4620      	mov	r0, r4
 800539a:	4798      	blx	r3
 800539c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800539e:	b1b9      	cbz	r1, 80053d0 <_reclaim_reent+0xb0>
 80053a0:	4620      	mov	r0, r4
 80053a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80053a6:	f7ff bfad 	b.w	8005304 <cleanup_glue>
 80053aa:	5949      	ldr	r1, [r1, r5]
 80053ac:	b941      	cbnz	r1, 80053c0 <_reclaim_reent+0xa0>
 80053ae:	3504      	adds	r5, #4
 80053b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053b2:	2d80      	cmp	r5, #128	; 0x80
 80053b4:	68d9      	ldr	r1, [r3, #12]
 80053b6:	d1f8      	bne.n	80053aa <_reclaim_reent+0x8a>
 80053b8:	4620      	mov	r0, r4
 80053ba:	f000 f819 	bl	80053f0 <_free_r>
 80053be:	e7ba      	b.n	8005336 <_reclaim_reent+0x16>
 80053c0:	680e      	ldr	r6, [r1, #0]
 80053c2:	4620      	mov	r0, r4
 80053c4:	f000 f814 	bl	80053f0 <_free_r>
 80053c8:	4631      	mov	r1, r6
 80053ca:	e7ef      	b.n	80053ac <_reclaim_reent+0x8c>
 80053cc:	2500      	movs	r5, #0
 80053ce:	e7ef      	b.n	80053b0 <_reclaim_reent+0x90>
 80053d0:	bd70      	pop	{r4, r5, r6, pc}
 80053d2:	bf00      	nop
 80053d4:	24000014 	.word	0x24000014

080053d8 <__malloc_lock>:
 80053d8:	4801      	ldr	r0, [pc, #4]	; (80053e0 <__malloc_lock+0x8>)
 80053da:	f7ff bf7b 	b.w	80052d4 <__retarget_lock_acquire_recursive>
 80053de:	bf00      	nop
 80053e0:	24004b00 	.word	0x24004b00

080053e4 <__malloc_unlock>:
 80053e4:	4801      	ldr	r0, [pc, #4]	; (80053ec <__malloc_unlock+0x8>)
 80053e6:	f7ff bf76 	b.w	80052d6 <__retarget_lock_release_recursive>
 80053ea:	bf00      	nop
 80053ec:	24004b00 	.word	0x24004b00

080053f0 <_free_r>:
 80053f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053f2:	2900      	cmp	r1, #0
 80053f4:	d048      	beq.n	8005488 <_free_r+0x98>
 80053f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053fa:	9001      	str	r0, [sp, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f1a1 0404 	sub.w	r4, r1, #4
 8005402:	bfb8      	it	lt
 8005404:	18e4      	addlt	r4, r4, r3
 8005406:	f7ff ffe7 	bl	80053d8 <__malloc_lock>
 800540a:	4a20      	ldr	r2, [pc, #128]	; (800548c <_free_r+0x9c>)
 800540c:	9801      	ldr	r0, [sp, #4]
 800540e:	6813      	ldr	r3, [r2, #0]
 8005410:	4615      	mov	r5, r2
 8005412:	b933      	cbnz	r3, 8005422 <_free_r+0x32>
 8005414:	6063      	str	r3, [r4, #4]
 8005416:	6014      	str	r4, [r2, #0]
 8005418:	b003      	add	sp, #12
 800541a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800541e:	f7ff bfe1 	b.w	80053e4 <__malloc_unlock>
 8005422:	42a3      	cmp	r3, r4
 8005424:	d90b      	bls.n	800543e <_free_r+0x4e>
 8005426:	6821      	ldr	r1, [r4, #0]
 8005428:	1862      	adds	r2, r4, r1
 800542a:	4293      	cmp	r3, r2
 800542c:	bf04      	itt	eq
 800542e:	681a      	ldreq	r2, [r3, #0]
 8005430:	685b      	ldreq	r3, [r3, #4]
 8005432:	6063      	str	r3, [r4, #4]
 8005434:	bf04      	itt	eq
 8005436:	1852      	addeq	r2, r2, r1
 8005438:	6022      	streq	r2, [r4, #0]
 800543a:	602c      	str	r4, [r5, #0]
 800543c:	e7ec      	b.n	8005418 <_free_r+0x28>
 800543e:	461a      	mov	r2, r3
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	b10b      	cbz	r3, 8005448 <_free_r+0x58>
 8005444:	42a3      	cmp	r3, r4
 8005446:	d9fa      	bls.n	800543e <_free_r+0x4e>
 8005448:	6811      	ldr	r1, [r2, #0]
 800544a:	1855      	adds	r5, r2, r1
 800544c:	42a5      	cmp	r5, r4
 800544e:	d10b      	bne.n	8005468 <_free_r+0x78>
 8005450:	6824      	ldr	r4, [r4, #0]
 8005452:	4421      	add	r1, r4
 8005454:	1854      	adds	r4, r2, r1
 8005456:	42a3      	cmp	r3, r4
 8005458:	6011      	str	r1, [r2, #0]
 800545a:	d1dd      	bne.n	8005418 <_free_r+0x28>
 800545c:	681c      	ldr	r4, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	6053      	str	r3, [r2, #4]
 8005462:	4421      	add	r1, r4
 8005464:	6011      	str	r1, [r2, #0]
 8005466:	e7d7      	b.n	8005418 <_free_r+0x28>
 8005468:	d902      	bls.n	8005470 <_free_r+0x80>
 800546a:	230c      	movs	r3, #12
 800546c:	6003      	str	r3, [r0, #0]
 800546e:	e7d3      	b.n	8005418 <_free_r+0x28>
 8005470:	6825      	ldr	r5, [r4, #0]
 8005472:	1961      	adds	r1, r4, r5
 8005474:	428b      	cmp	r3, r1
 8005476:	bf04      	itt	eq
 8005478:	6819      	ldreq	r1, [r3, #0]
 800547a:	685b      	ldreq	r3, [r3, #4]
 800547c:	6063      	str	r3, [r4, #4]
 800547e:	bf04      	itt	eq
 8005480:	1949      	addeq	r1, r1, r5
 8005482:	6021      	streq	r1, [r4, #0]
 8005484:	6054      	str	r4, [r2, #4]
 8005486:	e7c7      	b.n	8005418 <_free_r+0x28>
 8005488:	b003      	add	sp, #12
 800548a:	bd30      	pop	{r4, r5, pc}
 800548c:	24004a64 	.word	0x24004a64

08005490 <_init>:
 8005490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005492:	bf00      	nop
 8005494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005496:	bc08      	pop	{r3}
 8005498:	469e      	mov	lr, r3
 800549a:	4770      	bx	lr

0800549c <_fini>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	bf00      	nop
 80054a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a2:	bc08      	pop	{r3}
 80054a4:	469e      	mov	lr, r3
 80054a6:	4770      	bx	lr
